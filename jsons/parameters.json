[
    {
        "_id": 0,
        "description": "Use the picked-protein algorithm to infer protein PEP and FDR in Percolator",
        "percolator_style_1": "infer_proteins",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 1,
        "description": "Method to assign FDR and PEP to PSMs",
        "percolator_style_1": [
            "-y",
            "-Y"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 2,
        "description": "verbosity for pyqms",
        "pyqms_style_1": "pyqms_verbosity",
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 3,
        "description": "Defines the standard format string when formatting labeling percentile float",
        "pyqms_style_1": "PERCENTILE_FORMAT_STRING",
        "sugarpy_plot_style_1": "PERCENTILE_FORMAT_STRING",
        "sugarpy_run_style_1": "PERCENTILE_FORMAT_STRING",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 4,
        "description": "Set minmal abundance for elements used when building isotopologue library",
        "pyqms_style_1": "ELEMENT_MIN_ABUNDANCE",
        "sugarpy_plot_style_1": "ELEMENT_MIN_ABUNDANCE",
        "sugarpy_run_style_1": "ELEMENT_MIN_ABUNDANCE",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 5,
        "description": "Minimum required intensity for pyqms peak matching",
        "pyqms_style_1": "MIN_REL_PEAK_INTENSITY_FOR_MATCHING",
        "sugarpy_plot_style_1": "MIN_REL_PEAK_INTENSITY_FOR_MATCHING",
        "sugarpy_run_style_1": "MIN_REL_PEAK_INTENSITY_FOR_MATCHING",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 6,
        "description": "Minimum percentile overlap for matching labeled peaks",
        "pyqms_style_1": "REQUIRED_PERCENTILE_PEAK_OVERLAP",
        "sugarpy_plot_style_1": "REQUIRED_PERCENTILE_PEAK_OVERLAP",
        "sugarpy_run_style_1": "REQUIRED_PERCENTILE_PEAK_OVERLAP",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 7,
        "description": "Min number of matched isotopologues for pyqms to consider for quantification",
        "pyqms_style_1": "MINIMUM_NUMBER_OF_MATCHED_ISOTOPOLOGUES",
        "sugarpy_plot_style_1": "MINIMUM_NUMBER_OF_MATCHED_ISOTOPOLOGUES",
        "sugarpy_run_style_1": "MINIMUM_NUMBER_OF_MATCHED_ISOTOPOLOGUES",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 8,
        "description": "Tranform intensity by this factor for quantification",
        "pyqms_style_1": "INTENSITY_TRANSFORMATION_FACTOR",
        "sugarpy_plot_style_1": "INTENSITY_TRANSFORMATION_FACTOR",
        "sugarpy_run_style_1": "INTENSITY_TRANSFORMATION_FACTOR",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 9,
        "description": "Highest considered mz for quantification",
        "pyqms_style_1": "UPPER_MZ_LIMIT",
        "sugarpy_plot_style_1": "UPPER_MZ_LIMIT",
        "sugarpy_run_style_1": "UPPER_MZ_LIMIT",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 10,
        "description": "lowest considered mz for quantification",
        "pyqms_style_1": "LOWER_MZ_LIMIT",
        "sugarpy_plot_style_1": "LOWER_MZ_LIMIT",
        "sugarpy_run_style_1": "LOWER_MZ_LIMIT",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 11,
        "description": "Factor which will be multiplied with mz before conversion to integer",
        "pyqms_style_1": "MZ_TRANSFORMATION_FACTOR",
        "sugarpy_plot_style_1": "MZ_TRANSFORMATION_FACTOR",
        "sugarpy_run_style_1": "MZ_TRANSFORMATION_FACTOR",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 12,
        "description": "rel Intensity Error",
        "pyqms_style_1": "REL_I_RANGE",
        "sugarpy_plot_style_1": "REL_I_RANGE",
        "sugarpy_run_style_1": "REL_I_RANGE",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 13,
        "description": "Float to int conversion precision",
        "pyqms_style_1": "INTERNAL_PRECISION",
        "sugarpy_plot_style_1": "INTERNAL_PRECISION",
        "sugarpy_run_style_1": "INTERNAL_PRECISION",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 14,
        "description": "Max number of molecules in one matching bin.",
        "pyqms_style_1": "MAX_MOLECULES_PER_MATCH_BIN",
        "sugarpy_plot_style_1": "MAX_MOLECULES_PER_MATCH_BIN",
        "sugarpy_run_style_1": "MAX_MOLECULES_PER_MATCH_BIN",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 15,
        "description": "AA which are always SILAC labeled and not considered for calculating partially labeling percentile",
        "pyqms_style_1": "SILAC_AAS_LOCKED_IN_EXPERIMENT",
        "sugarpy_plot_style_1": "SILAC_AAS_LOCKED_IN_EXPERIMENT",
        "sugarpy_run_style_1": "SILAC_AAS_LOCKED_IN_EXPERIMENT",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 16,
        "description": "Build index for faster access",
        "pyqms_style_1": "BUILD_RESULT_INDEX",
        "sugarpy_plot_style_1": "BUILD_RESULT_INDEX",
        "sugarpy_run_style_1": "BUILD_RESULT_INDEX",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 17,
        "description": "Field which is used for scoring in pyqms_1_0_0",
        "pyqms_style_1": "evidence_score_field",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 18,
        "description": "Molecules to quantify. Can be either a list of strings or a csv file",
        "pyqms_style_1": "evidences",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 19,
        "description": "minimum required pyQms m_score for a quant event to be evaluated",
        "pyqms_style_1": "M_SCORE_THRESHOLD",
        "sugarpy_plot_style_1": "M_SCORE_THRESHOLD",
        "sugarpy_run_style_1": "M_SCORE_THRESHOLD",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 20,
        "description": "Molecules to quantify. Can be either a list of strings or a csv file",
        "pyqms_style_1": "molecules",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 21,
        "description": "weighting factor for pyQms mz score",
        "pyqms_style_1": "MZ_SCORE_PERCENTILE",
        "sugarpy_plot_style_1": "MZ_SCORE_PERCENTILE",
        "sugarpy_run_style_1": "MZ_SCORE_PERCENTILE",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 22,
        "description": "MS level on which that is taken into account, e.g. for spectrum extraction, matching of evidences, etc.",
        "mzml2mgf_style_1": "ms_level",
        "pipi_style_1": "ms_level",
        "pyqms_style_1": "ms_level",
        "sugarpy_plot_style_1": "ms_level",
        "sugarpy_run_style_1": "ms_level",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 23,
        "description": "Enrichment level of the label",
        "pyqms_style_1": "label_percentile",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 24,
        "description": "Enrichment of labeled elements in labeled chemical used",
        "pyqms_style_1": "FIXED_LABEL_ISOTOPE_ENRICHMENT_LEVELS",
        "sugarpy_plot_style_1": "FIXED_LABEL_ISOTOPE_ENRICHMENT_LEVELS",
        "sugarpy_run_style_1": "FIXED_LABEL_ISOTOPE_ENRICHMENT_LEVELS",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 25,
        "description": "Trivial name lookup mapping molecules to a trivial name",
        "pyqms_style_1": "trivial_names",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 26,
        "description": "Retention time border tolerance (in min) for curating RT windows",
        "pyqms_style_1": "rt_border_tolerance",
        "sugarpy_plot_style_1": "rt_border_tolerance",
        "sugarpy_run_style_1": "rt_border_tolerance",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 27,
        "description": "Set maximum Java heap size (used RAM)",
        "msfragger_style_1": "-Xmx",
        "msgfplus_style_1": "-Xmx",
        "mzidentml_style_1": "-Xmx",
        "pipi_style_1": "-Xmx",
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 28,
        "compomics_utilities_style_1": "aa_exception_dict",
        "description": "Unusual aminoacids that are not accepted (e.g. by unify_csv_1_0_0), but reported by some engines. Given as a dictionary mapping on he original_aa as well as the unimod modification name. U is now accepted as regular amino acid (2017/03/30)",
        "triggers_rerun": true,
        "unify_csv_style_1": "aa_exception_dict",
        "upeptide_mapper_style_1": "aa_exception_dict",
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 29,
        "description": "If True, multiple PSMs for one spectrum can be reported if their score difference is below the threshold. If False, all PSMs for one spectrum are removed if the score difference between the best and secondbest PSM is not above the threshold, i.e. if there are conflicting PSMs with similar scores.",
        "sanitize_csv_style_1": "accept_conflicting_psms",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 30,
        "description": "Static mods are not considered",
        "msfragger_style_1": "allow_multiple_variable_mods_on_residue",
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 31,
        "deepnovo_style_1": "base_mz",
        "description": "m/z value that is used as basis for the conversion from ppm to Da",
        "moda_style_1": "base_mz",
        "novor_style_1": "base_mz",
        "omssa_style_1": "base_mz",
        "pepnovo_style_1": "base_mz",
        "pipi_style_1": "base_mz",
        "pyqms_style_1": "REL_MZ_RANGE",
        "sugarpy_plot_style_1": "REL_MZ_RANGE",
        "sugarpy_run_style_1": "REL_MZ_RANGE",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 32,
        "description": "Sets the number of sequences loaded in as a batch from the database file",
        "msamanda_style_1": "LoadedProteinsAtOnce",
        "myrimatch_style_1": "NumBatches",
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, sequence batch size"
    },
    {
        "_id": 33,
        "deepnovo_style_1": "buffer_size",
        "description": "sets the number of spectra loaded into memory as a batch",
        "msamanda_style_1": "LoadedSpectraAtOnce",
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 34,
        "add_estimated_fdr_style_1": "bigger_scores_better",
        "description": "Defines if bigger scores are better (or the other way round), for scores that should be validated (see validation_score_field) e.g. by percolator, qvality",
        "percolator_style_1": "bigger_scores_better",
        "qvality_style_1": "-r",
        "sanitize_csv_style_1": "bigger_scores_better",
        "svm_style_1": "bigger_scores_better",
        "triggers_rerun": true,
        "value_translations": {
            "add_estimated_fdr_style_1": {
                "None": null,
                "deepnovo_0_0_1": true,
                "mascot_x_x_x": true,
                "moda_v1_51": true,
                "moda_v1_61": true,
                "moda_v1_62": true,
                "msamanda_1_0_0_5242": true,
                "msamanda_1_0_0_5243": true,
                "msamanda_1_0_0_6299": true,
                "msamanda_1_0_0_6300": true,
                "msamanda_1_0_0_7503": true,
                "msamanda_1_0_0_7504": true,
                "msamanda_2_0_0_10695": true,
                "msamanda_2_0_0_11219": true,
                "msamanda_2_0_0_13723": true,
                "msamanda_2_0_0_9695": true,
                "msamanda_2_0_0_9706": true,
                "msfragger_20170103": true,
                "msfragger_20171106": true,
                "msfragger_20190222": true,
                "msgfplus_v2016_09_16": false,
                "msgfplus_v2017_01_27": false,
                "msgfplus_v2018_01_30": false,
                "msgfplus_v2018_06_28": false,
                "msgfplus_v2018_09_12": false,
                "msgfplus_v2019_01_22": false,
                "msgfplus_v2019_04_18": false,
                "msgfplus_v9979": false,
                "myrimatch_2_1_138": true,
                "myrimatch_2_2_140": true,
                "omssa_2_1_9": false,
                "pglyco_db_2_2_0": true,
                "pipi_1_4_5": true,
                "pipi_1_4_6": true,
                "xtandem_alanine": true,
                "xtandem_cyclone_2010": true,
                "xtandem_jackhammer": true,
                "xtandem_piledriver": true,
                "xtandem_sledgehammer": true,
                "xtandem_vengeance": true
            },
            "percolator_style_1": {
                "None": null,
                "deepnovo_0_0_1": true,
                "mascot_x_x_x": true,
                "moda_v1_51": true,
                "moda_v1_61": true,
                "moda_v1_62": true,
                "msamanda_1_0_0_5242": true,
                "msamanda_1_0_0_5243": true,
                "msamanda_1_0_0_6299": true,
                "msamanda_1_0_0_6300": true,
                "msamanda_1_0_0_7503": true,
                "msamanda_1_0_0_7504": true,
                "msamanda_2_0_0_10695": true,
                "msamanda_2_0_0_11219": true,
                "msamanda_2_0_0_13723": true,
                "msamanda_2_0_0_9695": true,
                "msamanda_2_0_0_9706": true,
                "msfragger_20170103": true,
                "msfragger_20171106": true,
                "msfragger_20190222": true,
                "msgfplus_v2016_09_16": false,
                "msgfplus_v2017_01_27": false,
                "msgfplus_v2018_01_30": false,
                "msgfplus_v2018_06_28": false,
                "msgfplus_v2018_09_12": false,
                "msgfplus_v2019_01_22": false,
                "msgfplus_v2019_04_18": false,
                "msgfplus_v9979": false,
                "myrimatch_2_1_138": true,
                "myrimatch_2_2_140": true,
                "omssa_2_1_9": false,
                "pglyco_db_2_2_0": true,
                "pipi_1_4_5": true,
                "pipi_1_4_6": true,
                "xtandem_alanine": true,
                "xtandem_cyclone_2010": true,
                "xtandem_jackhammer": true,
                "xtandem_piledriver": true,
                "xtandem_sledgehammer": true,
                "xtandem_vengeance": true
            },
            "qvality_style_1": {
                "None": null,
                "deepnovo_0_0_1": true,
                "mascot_x_x_x": true,
                "moda_v1_51": true,
                "moda_v1_61": true,
                "moda_v1_62": true,
                "msamanda_1_0_0_5242": true,
                "msamanda_1_0_0_5243": true,
                "msamanda_1_0_0_6299": true,
                "msamanda_1_0_0_6300": true,
                "msamanda_1_0_0_7503": true,
                "msamanda_1_0_0_7504": true,
                "msamanda_2_0_0_10695": true,
                "msamanda_2_0_0_11219": true,
                "msamanda_2_0_0_13723": true,
                "msamanda_2_0_0_9695": true,
                "msamanda_2_0_0_9706": true,
                "msfragger_20170103": true,
                "msfragger_20171106": true,
                "msfragger_20190222": true,
                "msgfplus_v2016_09_16": false,
                "msgfplus_v2017_01_27": false,
                "msgfplus_v2018_01_30": false,
                "msgfplus_v2018_06_28": false,
                "msgfplus_v2018_09_12": false,
                "msgfplus_v2019_01_22": false,
                "msgfplus_v2019_04_18": false,
                "msgfplus_v9979": false,
                "myrimatch_2_1_138": true,
                "myrimatch_2_2_140": true,
                "omssa_2_1_9": false,
                "pglyco_db_2_2_0": true,
                "pipi_1_4_5": true,
                "pipi_1_4_6": true,
                "xtandem_alanine": true,
                "xtandem_cyclone_2010": true,
                "xtandem_jackhammer": true,
                "xtandem_piledriver": true,
                "xtandem_sledgehammer": true,
                "xtandem_vengeance": true
            },
            "sanitize_csv_style_1": {
                "None": null,
                "deepnovo_0_0_1": true,
                "mascot_x_x_x": true,
                "moda_v1_51": true,
                "moda_v1_61": true,
                "moda_v1_62": true,
                "msamanda_1_0_0_5242": true,
                "msamanda_1_0_0_5243": true,
                "msamanda_1_0_0_6299": true,
                "msamanda_1_0_0_6300": true,
                "msamanda_1_0_0_7503": true,
                "msamanda_1_0_0_7504": true,
                "msamanda_2_0_0_10695": true,
                "msamanda_2_0_0_11219": true,
                "msamanda_2_0_0_13723": true,
                "msamanda_2_0_0_9695": true,
                "msamanda_2_0_0_9706": true,
                "msfragger_20170103": true,
                "msfragger_20171106": true,
                "msfragger_20190222": true,
                "msgfplus_v2016_09_16": false,
                "msgfplus_v2017_01_27": false,
                "msgfplus_v2018_01_30": false,
                "msgfplus_v2018_06_28": false,
                "msgfplus_v2018_09_12": false,
                "msgfplus_v2019_01_22": false,
                "msgfplus_v2019_04_18": false,
                "msgfplus_v9979": false,
                "myrimatch_2_1_138": true,
                "myrimatch_2_2_140": true,
                "omssa_2_1_9": false,
                "pglyco_db_2_2_0": true,
                "pipi_1_4_5": true,
                "pipi_1_4_6": true,
                "xtandem_alanine": true,
                "xtandem_cyclone_2010": true,
                "xtandem_jackhammer": true,
                "xtandem_piledriver": true,
                "xtandem_sledgehammer": true,
                "xtandem_vengeance": true
            },
            "svm_style_1": {
                "None": null,
                "deepnovo_0_0_1": true,
                "mascot_x_x_x": true,
                "moda_v1_51": true,
                "moda_v1_61": true,
                "moda_v1_62": true,
                "msamanda_1_0_0_5242": true,
                "msamanda_1_0_0_5243": true,
                "msamanda_1_0_0_6299": true,
                "msamanda_1_0_0_6300": true,
                "msamanda_1_0_0_7503": true,
                "msamanda_1_0_0_7504": true,
                "msamanda_2_0_0_10695": true,
                "msamanda_2_0_0_11219": true,
                "msamanda_2_0_0_13723": true,
                "msamanda_2_0_0_9695": true,
                "msamanda_2_0_0_9706": true,
                "msfragger_20170103": true,
                "msfragger_20171106": true,
                "msfragger_20190222": true,
                "msgfplus_v2016_09_16": false,
                "msgfplus_v2017_01_27": false,
                "msgfplus_v2018_01_30": false,
                "msgfplus_v2018_06_28": false,
                "msgfplus_v2018_09_12": false,
                "msgfplus_v2019_01_22": false,
                "msgfplus_v2019_04_18": false,
                "msgfplus_v9979": false,
                "myrimatch_2_1_138": true,
                "myrimatch_2_2_140": true,
                "omssa_2_1_9": false,
                "pglyco_db_2_2_0": true,
                "pipi_1_4_5": true,
                "pipi_1_4_6": true,
                "xtandem_alanine": true,
                "xtandem_cyclone_2010": true,
                "xtandem_jackhammer": true,
                "xtandem_piledriver": true,
                "xtandem_sledgehammer": true,
                "xtandem_vengeance": true
            }
        },
        "value_type": "select"
    },
    {
        "_id": 35,
        "description": "The mass added to the peptide C-terminus by protein cleavage",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float",
        "xtandem_style_1": "protein, cleavage C-terminal mass change"
    },
    {
        "_id": 36,
        "description": "The mass added to the peptide N-terminus by protein cleavage",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float",
        "xtandem_style_1": "protein, cleavage N-terminal mass change"
    },
    {
        "_id": 37,
        "description": "Specifies the trimming of a protein N-terminal methionine as a variable modification",
        "msfragger_style_1": "clip_nTerm_M",
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 38,
        "description": "Compensate for very small database files.",
        "triggers_rerun": true,
        "value_translations": {
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "scoring, cyclic permutation"
    },
    {
        "_id": 39,
        "compomics_utilities_style_1": "compomics_utility_name",
        "description": "Default value accesses the PeptideMapper tool, other tools are not implemented/covered yet",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 40,
        "description": "Defines the compomics version to use",
        "triggers_rerun": true,
        "ucontroller_style_1": "compomics_version",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 41,
        "description": "Compress raw search result to .gz: True or False",
        "triggers_rerun": true,
        "ucontroller_style_1": "compress_raw_search_results_if_possible",
        "value_translations": {
            "ucontroller_style_1": {
                "crux_2_1": false,
                "deepnovo_0_0_1": false,
                "kojak_1_5_3": false,
                "mascot_x_x_x": true,
                "moda_v1_51": false,
                "moda_v1_61": false,
                "moda_v1_62": false,
                "msamanda_1_0_0_5242": false,
                "msamanda_1_0_0_5243": false,
                "msamanda_1_0_0_6299": false,
                "msamanda_1_0_0_6300": false,
                "msamanda_1_0_0_7503": false,
                "msamanda_1_0_0_7504": false,
                "msamanda_2_0_0_10695": false,
                "msamanda_2_0_0_11219": false,
                "msamanda_2_0_0_13723": false,
                "msamanda_2_0_0_9695": false,
                "msamanda_2_0_0_9706": false,
                "msfragger_20170103": false,
                "msfragger_20171106": false,
                "msfragger_20190222": false,
                "msgfplus_v2016_09_16": true,
                "msgfplus_v2017_01_27": true,
                "msgfplus_v2018_01_30": true,
                "msgfplus_v2018_06_28": true,
                "msgfplus_v2018_09_12": true,
                "msgfplus_v2019_01_22": true,
                "msgfplus_v2019_04_18": true,
                "msgfplus_v9979": true,
                "myrimatch_2_1_138": true,
                "myrimatch_2_2_140": true,
                "novor_1_05": false,
                "novor_1_1beta": false,
                "omssa_2_1_9": false,
                "pepnovo_3_1": false,
                "pglyco_db_2_2_0": false,
                "pipi_1_4_5": false,
                "pipi_1_4_6": false,
                "xtandem_alanine": true,
                "xtandem_cyclone_2010": true,
                "xtandem_jackhammer": true,
                "xtandem_piledriver": true,
                "xtandem_sledgehammer": true,
                "xtandem_vengeance": true
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 42,
        "description": "Compute xcorr",
        "myrimatch_style_1": "ComputeXCorr",
        "triggers_rerun": true,
        "value_translations": {
            "myrimatch_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 43,
        "description": "Probability of consecutive ion (used in correlation correction)",
        "omssa_style_1": "-scorp",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 44,
        "csv2counted_results_style_1": "count_column_names",
        "description": "List of column headers which are used for counting. The combination of these headers creates the unique countable element.",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 45,
        "csv2counted_results_style_1": "count_by_file",
        "description": "the number of unique hits for each identifier is given in separate columns for each raw file (file name as defiened in Spectrum Title)",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 46,
        "csv2counted_results_style_1": "convert2sfinx",
        "description": "If True, the header of the identifier column is \"rownames\". If False, the joined identifier header name will be used",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 47,
        "description": "Number of used cpus/threads -1 : 'max - 1' >0 : cpu num",
        "kojak_style_1": "cpus",
        "moda_style_1": "-@",
        "msfragger_style_1": "num_threads",
        "msgfplus_style_1": "-thread",
        "myrimatch_style_1": "-cpus",
        "omssa_style_1": "-nt",
        "pglyco_db_style_1": "process",
        "pipi_style_1": "thread_num",
        "triggers_rerun": false,
        "ucontroller_style_1": "cpus",
        "value_translations": {
            "kojak_style_1": {
                "-1": "max - 1"
            },
            "moda_style_1": {
                "-1": "max - 1"
            },
            "msfragger_style_1": {
                "-1": "max - 1"
            },
            "msgfplus_style_1": {
                "-1": "max - 1"
            },
            "myrimatch_style_1": {
                "-1": "max - 1"
            },
            "omssa_style_1": {
                "-1": "max - 1"
            },
            "pglyco_db_style_1": {
                "-1": "max - 1"
            },
            "pipi_style_1": {
                "-1": "max - 1"
            },
            "ucontroller_style_1": {
                "-1": "max - 1"
            },
            "xtandem_style_1": {
                "-1": "max - 1"
            }
        },
        "value_type": "int _uevaluation_req",
        "xtandem_style_1": "spectrum, threads"
    },
    {
        "_id": 48,
        "description": "Cross-link and mono-link masses allowed. May have more than one of each parameter. Format for cross_link is: **[amino acids] [amino acids] [mass mod] [identifier]** One or more amino acids (uppercase only!!) can be specified for each linkage moiety. Use lowercase 'n' or 'c' to indicate protein N-terminus or C-terminus",
        "kojak_style_1": "cross_link_definition",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 49,
        "description": "Rules are defined as list of lists with three elements: 1. the column name/csv fieldname, 2. the rule, 3. the value which should be compared e.g.: ['Is decoy', 'equals', 'false']",
        "filter_csv_style_1": "filter_rules",
        "triggers_rerun": true,
        "value_translations": {
            "filter_csv_style_1": {}
        },
        "value_type": "list"
    },
    {
        "_id": 50,
        "compomics_utilities_style_1": "database",
        "deepnovo_style_1": "db_fasta_file",
        "description": "Path to database file containing protein sequences in fasta format.",
        "kojak_style_1": "database",
        "moda_style_1": "Fasta",
        "msamanda_style_1": "database",
        "msfragger_style_1": "database_name",
        "msgfplus_style_1": "-d",
        "myrimatch_style_1": "ProteinDatabase",
        "omssa_style_1": "-d",
        "pglyco_db_style_1": "fasta",
        "pipi_style_1": "db",
        "triggers_rerun": true,
        "unify_csv_style_1": "database",
        "upeptide_mapper_style_1": "database",
        "value_translations": {},
        "value_type": "str",
        "xtandem_style_1": "file URL"
    },
    {
        "_id": 51,
        "description": "If a taxonomy ID is specified, only the corresponding protein sequences from the fasta database are included in the search.",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "all": 0
            }
        },
        "value_type": "str",
        "xtandem_style_1": "taxon label"
    },
    {
        "_id": 52,
        "description": "Decoy database: creates a target decoy database based on shuffling of peptides (shuffle_peptide) or complete reversing the protein sequence (reverse_protein).",
        "generate_target_decoy_style_1": "mode",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 53,
        "description": "decoy-specific tag to differentiate between targets and decoys",
        "generate_target_decoy_style_1": "decoy_tag",
        "kojak_style_1": "decoy_tag",
        "myrimatch_style_1": "DecoyPrefix",
        "mzidentml_style_1": "-decoyRegex",
        "triggers_rerun": true,
        "unify_csv_style_1": "decoy_tag",
        "upeptide_mapper_style_1": "decoy_tag",
        "value_translations": {},
        "value_type": "str",
        "xtandem2csv_style_1": "decoy_tag"
    },
    {
        "_id": 54,
        "description": "Perform Deisotoping for MS2 spectra",
        "msamanda_style_1": "PerformDeisotoping",
        "triggers_rerun": true,
        "value_translations": {
            "msamanda_style_1": {
                "false": "false",
                "true": "true"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 55,
        "description": "List of parameters that are deleted before .json is dumped (to not overload the .json with unimportant informations)",
        "triggers_rerun": true,
        "ucontroller_style_1": "del_from_params_before_json_dump",
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 56,
        "description": "PepNovo model used for de novo sequencing. Based on the enzyme and fragmentation type. Currently only CID_IT_TRYP available.",
        "pepnovo_style_1": "-model",
        "triggers_rerun": true,
        "value_translations": {
            "pepnovo_style_1": {
                "cid_trypsin": "CID_IT_TRYP"
            }
        },
        "value_type": "select"
    },
    {
        "_id": 57,
        "deepnovo_style_1": "train_dir",
        "description": "Directory containing the model files de novo sequencing. Use \"default\" for the default folder of the engine (DeepNovo: <deepnovo_resources>/train.example; PepNovo: resources/<platform>/<architecture>/pepnovo_3_1)",
        "pepnovo_style_1": "-model_dir",
        "triggers_rerun": true,
        "value_translations": {
            "pepnovo_style_1": {
                "default": null
            }
        },
        "value_type": "str"
    },
    {
        "_id": 58,
        "description": "Engine creates an own decoy database. Not recommended, because a target decoy database should be generated independently from the search engine, e.g. by using the uNode generate_target_decoy_1_0_0",
        "msamanda_style_1": "generate_decoy",
        "msgfplus_style_1": "-tda",
        "pipi_style_1": "add_decoy",
        "triggers_rerun": true,
        "value_translations": {
            "msamanda_style_1": {
                "false": "false",
                "true": "true"
            },
            "msgfplus_style_1": {
                "false": "0",
                "true": "1"
            },
            "pipi_style_1": {
                "false": "0",
                "true": "1"
            },
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "scoring, include reverse"
    },
    {
        "_id": 59,
        "description": "Create folders for the output of engines that allow this option in their META_INFO ('create_own_folder' : True). True or False",
        "triggers_rerun": true,
        "ucontroller_style_1": "engines_create_folders",
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 60,
        "deepnovo_style_1": "cleavage_rule",
        "description": "Enzyme: Rule of protein cleavagePossible cleavages are : argc -> [R]|{P} aspn -> [X]|[D] aspn_gluc chymotrypsin -> [FMWY]|{P} chymotrypsin_p -> [FMWY]|[X] cnbr -> [M]|{P} elastase -> [AGILV]|{P} formic_acid -> [D]|{P} gluc lysc lysc_p lysn no_cleavage nonspecific pepsina semi_chymotrypsin semi_gluc semi_tryptic thermolysin_p top_down trypsin trypsin_chymotrypsin trypsin_cnbr trypsin_p lysc_gluc",
        "generate_target_decoy_style_1": "enzyme",
        "kojak_style_1": "enzyme",
        "moda_style_1": "Enzyme",
        "msamanda_style_1": "enzyme specificity",
        "msfragger_style_1": "enzyme",
        "msgfplus_style_1": "-e",
        "myrimatch_style_1": "CleavageRules",
        "novor_style_1": "enzyme",
        "omssa_style_1": "-e",
        "pepnovo_style_1": "-digest",
        "percolator_style_1": "enz",
        "pglyco_db_style_1": "enzyme",
        "pipi_style_1": "enzyme",
        "triggers_rerun": true,
        "unify_csv_style_1": "enzyme",
        "value_translations": {
            "deepnovo_style_1": {
                "argc": "arg-c",
                "aspn": "asp-n",
                "clostripain": "clostripain",
                "cnbr": "cnbr",
                "formic_acid": "formic acid",
                "lysc": "lysc",
                "trypsin": "trypsin"
            },
            "generate_target_decoy_style_1": {
                "argc": "R;C;P",
                "aspn": "D;N;",
                "chymotrypsin": "FMWY;C;P",
                "chymotrypsin_p": "FMWY;C;",
                "clostripain": "R;C;",
                "cnbr": "M;C;P",
                "elastase": "AGILV;C;P",
                "formic_acid": "D;C;P",
                "gluc": "DE;C;P",
                "gluc_bicarb": "E;C;P",
                "iodosobenzoate": "W;C;",
                "lysc": "K;C;P",
                "lysc_gluc": "DEK;C;P",
                "lysc_p": "K;C;",
                "lysn": "K;N;",
                "lysn_promisc": "AKRS;N;",
                "pepsina": "FL;C;",
                "protein_endopeptidase": "P;C;",
                "staph_protease": "E;C;",
                "trypsin": "KR;C;P",
                "trypsin_cnbr": "KRM;C;P",
                "trypsin_gluc": "DEKR;C;P",
                "trypsin_p": "KR;C;"
            },
            "kojak_style_1": {
                "gluc": "[DE]|{P}",
                "lysc_gluc": "[DEK]|{P}",
                "lysn": "|[K]",
                "trypsin": "[KR]|{P}",
                "trypsin_p": "[RK]|"
            },
            "moda_style_1": {
                "argc": "argc, R/C",
                "aspn": "aspn, D/N;",
                "chymotrypsin": "chymotrypsin, FMWY/C",
                "chymotrypsin_p": "chymotrypsin, FMWY/C",
                "clostripain": "clostripain, R/C",
                "cnbr": "cnbr, M/C",
                "elastase": "elastase, AGILV/C",
                "formic_acid": "formic_acid, D/C",
                "gluc": "gluc, DE/C",
                "gluc_bicarb": "gluc_bicarb, E/C",
                "iodosobenzoate": "iodosobenzoate, W/C",
                "lysc": "lysc, K/C",
                "lysc_p": "lysc_p, K/C",
                "lysn": "lysn, K/N",
                "lysn_promisc": "lysn_promisc, AKRS/N",
                "no_cleavage": "NONE",
                "pepsina": "pepsina, FL/C",
                "protein_endopeptidase": "protein_endopeptidase, P/C",
                "staph_protease": "staph_protease, E/C",
                "trypsin": "trypsin, KR/C",
                "trypsin_cnbr": "trypsin_cnbr, KRM/C",
                "trypsin_gluc": "trypsin_gluc, DEKR/C",
                "trypsin_p": "trypsin_p, KR/C"
            },
            "msamanda_style_1": {
                "argc": "R;after;P",
                "aspn": "D;before;",
                "chymotrypsin": "FMWY;after;P",
                "chymotrypsin_p": "FMWY;after;",
                "clostripain": "R;after;",
                "cnbr": "M;after;P",
                "elastase": "AGILV;after;P",
                "formic_acid": "D;after;P",
                "gluc": "DE;after;P",
                "gluc_bicarb": "E;after;P",
                "iodosobenzoate": "W;after;",
                "lysc": "K;after;P",
                "lysc_gluc": "DEK;after;P",
                "lysc_p": "K;after;",
                "lysn": "K;before;",
                "lysn_promisc": "AKRS;before;",
                "nonspecific": ";;",
                "pepsina": "FL;after;",
                "protein_endopeptidase": "P;after;",
                "staph_protease": "E;after;",
                "trypsin": "KR;after;P",
                "trypsin_cnbr": "KRM;after;P",
                "trypsin_gluc": "DEKR;after;P",
                "trypsin_p": "KR;after;"
            },
            "msfragger_style_1": {
                "argc": "R;C;P",
                "aspn": "D;N;",
                "chymotrypsin": "FMWY;C;P",
                "chymotrypsin_p": "FMWY;C;",
                "clostripain": "R;C;",
                "cnbr": "M;C;P",
                "elastase": "AGILV;C;P",
                "formic_acid": "D;C;P",
                "gluc": "DE;C;P",
                "gluc_bicarb": "E;C;P",
                "iodosobenzoate": "W;C;",
                "lysc": "K;C;P",
                "lysc_gluc": "DEK;C;P",
                "lysc_p": "K;C;",
                "lysn": "K;N;",
                "lysn_promisc": "AKRS;N;",
                "nonspecific": "ACDEFGHIKLMNPQRSTVWY;C;",
                "pepsina": "FL;C;",
                "protein_endopeptidase": "P;C;",
                "staph_protease": "E;C;",
                "trypsin": "KR;C;P",
                "trypsin_cnbr": "KRM;C;P",
                "trypsin_gluc": "DEKR;C;P",
                "trypsin_p": "KR;C;"
            },
            "msgfplus_style_1": {
                "alpha_lp": "8",
                "argc": "6",
                "aspn": "7",
                "chymotrypsin": "2",
                "gluc": "5",
                "lysc": "3",
                "lysn": "4",
                "no_cleavage": "9",
                "nonspecific": "0",
                "trypsin": "1",
                "trypsin_p": "1"
            },
            "myrimatch_style_1": {
                "aspn": "Asp-N",
                "chymotrypsin": "Chymotrypsin",
                "cnbr": "CNBr",
                "formic_acid": "Formic_acid",
                "lysc": "Lys-C",
                "lysc_p": "Lys-C/P",
                "pepsina": "PepsinA",
                "trypsin": "Trypsin",
                "trypsin_chymotrypsin": "TrypChymo",
                "trypsin_p": "Trypsin/P"
            },
            "novor_style_1": {
                "trypsin": "Trypsin"
            },
            "omssa_style_1": {
                "argc": "1",
                "aspn": "12",
                "aspn_gluc": "14",
                "chymotrypsin": "3",
                "chymotrypsin_p": "18",
                "cnbr": "2",
                "formic_acid": "4",
                "gluc": "13",
                "lysc": "5",
                "lysc_p": "6",
                "lysn": "21",
                "no_cleavage": "11",
                "nonspecific": "17",
                "pepsina": "7",
                "thermolysin_p": "22",
                "top_down": "15",
                "trypsin": "0",
                "trypsin_chymotrypsin": "9",
                "trypsin_cnbr": "8",
                "trypsin_p": "10"
            },
            "pepnovo_style_1": {
                "nonspecific": "NON_SPECIFIC",
                "trypsin": "TRYPSIN"
            },
            "percolator_style_1": {
                "argc": "R;C;P",
                "aspn": "D;N;",
                "chymotrypsin": "FMWY;C;P",
                "chymotrypsin_p": "FMWY;C;",
                "clostripain": "R;C;",
                "cnbr": "M;C;P",
                "elastase": "AGILV;C;P",
                "formic_acid": "D;C;P",
                "gluc": "DE;C;P",
                "gluc_bicarb": "E;C;P",
                "iodosobenzoate": "W;C;",
                "lysc": "K;C;P",
                "lysc_gluc": "DEK;C;P",
                "lysc_p": "K;C;",
                "lysn": "K;N;",
                "lysn_promisc": "AKRS;N;",
                "nonspecific": "ACDEFGHIKLMNPQRSTVWY;C;",
                "pepsina": "FL;C;",
                "protein_endopeptidase": "P;C;",
                "staph_protease": "E;C;",
                "trypsin": "KR;C;P",
                "trypsin_cnbr": "KRM;C;P",
                "trypsin_gluc": "DEKR;C;P",
                "trypsin_p": "KR;C;"
            },
            "pglyco_db_style_1": {
                "chymotrypsin": "Chymotrypsin_FYWL-P-C",
                "formic_acid_p": "FormicAcid_D-C",
                "gluc": "GluC_DE-P-C",
                "lysc": "Lys_K-P-C",
                "lysc_p": "Lys_K-C",
                "pepsina": "PepsinA_FL-C",
                "trypsin": "Trypsin_KR-P-C",
                "trypsin_p": "Trypsin_KR-C"
            },
            "pipi_style_1": {
                "aspn": "AspN;0;D;-",
                "chymotrypsin": "Chymotrypsin;1;FMWY;P",
                "gluc": "GluC;1;DE;P",
                "lysc_p": "LysC;1;K;-",
                "lysn": "LysN;0;K;-",
                "trypsin": "Trypsin;1;KR;P"
            },
            "unify_csv_style_1": {
                "argc": "R;C;P",
                "aspn": "D;N;",
                "chymotrypsin": "FMWY;C;P",
                "chymotrypsin_p": "FMWY;C;",
                "clostripain": "R;C;",
                "cnbr": "M;C;P",
                "elastase": "AGILV;C;P",
                "formic_acid": "D;C;P",
                "gluc": "DE;C;P",
                "gluc_bicarb": "E;C;P",
                "iodosobenzoate": "W;C;",
                "lysc": "K;C;P",
                "lysc_gluc": "DEK;C;P",
                "lysc_p": "K;C;",
                "lysn": "K;N;",
                "lysn_promisc": "AKRS;N;",
                "nonspecific": "ACDEFGHIKLMNPQRSTVWY;C;",
                "pepsina": "FL;C;",
                "protein_endopeptidase": "P;C;",
                "staph_protease": "E;C;",
                "trypsin": "KR;C;P",
                "trypsin_cnbr": "KRM;C;P",
                "trypsin_gluc": "DEKR;C;P",
                "trypsin_p": "KR;C;"
            },
            "xtandem_style_1": {
                "argc": "[R]|{P}",
                "aspn": "[X]|[D]",
                "chymotrypsin": "[FMWY]|{P}",
                "chymotrypsin_p": "[FMWY]|[X]",
                "clostripain": "[R]|[X]",
                "cnbr": "[M]|{P}",
                "elastase": "[AGILV]|{P}",
                "formic_acid": "[D]|{P}",
                "gluc": "[DE]|{P}",
                "gluc_bicarb": "[E]|{P}",
                "iodosobenzoate": "[W]|[X]",
                "lysc": "[K]|{P}",
                "lysc_gluc": "[DEK]|[X]|{P}",
                "lysc_p": "[K]|[X]",
                "lysn": "[X]|[K]",
                "lysn_promisc": "[X]|[AKRS]",
                "nonspecific": "[X]|[X]",
                "pepsina": "[FL]|[X]",
                "protein_endopeptidase": "[P]|[X]",
                "staph_protease": "[E]|[X]",
                "tca": "[FMWY]|{P},[KR]|{P},[X]|[D]",
                "trypsin": "[KR]|{P}",
                "trypsin_cnbr": "[KR]|{P},[M]|{P}",
                "trypsin_gluc": "[DEKR]|{P}",
                "trypsin_p": "[RK]|[X]"
            }
        },
        "value_type": "select",
        "xtandem_style_1": "protein, cleavage site"
    },
    {
        "_id": 61,
        "description": "Target PSMs with a lower FDR than this threshold will be used as a positive training set for SVM post-processing",
        "svm_style_1": "fdr_cutoff",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 62,
        "description": "List of modifications (unimod name) that are not allowed to occur at the C-terminus of a peptide, e.g. ['GG']",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list",
        "xtandem_style_1": "residue, potential modification mass"
    },
    {
        "_id": 63,
        "description": "Aminoacids that are not allowed during/taken into account during denovo searches. Given as a string of comma seperated aminoacids (single letter code)",
        "novor_style_1": "forbiddenResidues",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 64,
        "description": "If set 'True', engines are forced to re-run although no node-related parameters have changed",
        "triggers_rerun": true,
        "ucontroller_style_1": "force",
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 65,
        "description": "Removes peaks in this m/z range prior to matching. Given as list [min_clear_mz, max_clear_mz]. Useful for iTRAQ/TMT experiments, i.e. [0.0, 150.0].",
        "msfragger_style_1": "clear_mz_range",
        "pipi_style_1": "frag_clear_mz_range",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 66,
        "description": "Mass tolerance of measured and calculated fragment ions",
        "moda_style_1": "FragTolerance",
        "msamanda_style_1": "ms2_tol",
        "msfragger_style_1": "fragment_mass_tolerance",
        "myrimatch_style_1": "FragmentMzTolerance",
        "novor_style_1": "fragmentIonErrorTol",
        "omssa_style_1": "-to",
        "pepnovo_style_1": "-fragment_tolerance",
        "pglyco_db_style_1": "search_fragment_tolerance",
        "pipi_style_1": "ms2_tolerance",
        "pyqms_style_1": "REL_MZ_RANGE",
        "sugarpy_plot_style_1": "REL_MZ_RANGE",
        "sugarpy_run_style_1": "REL_MZ_RANGE",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, fragment monoisotopic mass error"
    },
    {
        "_id": 67,
        "description": "Fragment mass tolerance unit: available in ppm (parts-per-millon), da (Dalton) or mmu (Milli mass unit)",
        "moda_style_1": "FragTolerance",
        "msamanda_style_1": "ms2_tol unit",
        "msfragger_style_1": "fragment_mass_units",
        "myrimatch_style_1": "FragmentMzTolerance",
        "novor_style_1": "fragmentIonErrorTol",
        "omssa_style_1": "frag_mass_tolerance_unit",
        "pepnovo_style_1": "frag_mass_tolerance_unit",
        "pglyco_db_style_1": "search_fragment_tolerance_type",
        "pipi_style_1": "frag_mass_tolerance_unit",
        "pyqms_style_1": "REL_MZ_RANGE",
        "sugarpy_plot_style_1": "REL_MZ_RANGE",
        "sugarpy_run_style_1": "REL_MZ_RANGE",
        "triggers_rerun": true,
        "value_translations": {
            "msamanda_style_1": {
                "da": "Da"
            },
            "msfragger_style_1": {
                "da": 0,
                "ppm": 1
            },
            "myrimatch_style_1": {
                "da": "Da"
            },
            "novor_style_1": {
                "da": "Da"
            },
            "omssa_style_1": {
                "da": "Da"
            },
            "pglyco_db_style_1": {
                "da": "Da"
            },
            "xtandem_style_1": {
                "da": "Daltons"
            }
        },
        "value_type": "select",
        "xtandem_style_1": "spectrum, fragment monoisotopic mass error units"
    },
    {
        "_id": 68,
        "description": "Fragment mass type: monoisotopic or average",
        "omssa_style_1": "-tom",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "average": "1",
                "monoisotopic": "0"
            }
        },
        "value_type": "select",
        "xtandem_style_1": "spectrum, fragment mass type"
    },
    {
        "_id": 69,
        "description": "Maximum fragment ion charge to search.",
        "msfragger_style_1": "max_fragment_charge",
        "omssa_style_1": "-zoh",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 70,
        "description": "Used fragmentation method, e.g. collision-induced dissociation (cid), electron-capture dissociation (ecd), electron-transfer dissociation (etd), Higher-energy C-trap dissociation (hcd)",
        "msgfplus_style_1": "-m",
        "novor_style_1": "fragmentation",
        "triggers_rerun": true,
        "value_translations": {
            "msgfplus_style_1": {
                "cid": "1",
                "etd": "2",
                "hcd": "3"
            },
            "novor_style_1": {
                "cid": "CID",
                "hcd": "HCD"
            }
        },
        "value_type": "select"
    },
    {
        "_id": 71,
        "description": "Minimal considered fragment ion m/z",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, minimum fragment mz"
    },
    {
        "_id": 72,
        "description": "Blocksize for ftp download",
        "get_ftp_style_1": "ftp_blocksize",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 73,
        "description": "ftp folder that should be downloaded",
        "get_ftp_style_1": "ftp_folder",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 74,
        "description": "Only files with the defined file extension are downloaded with ftp download",
        "get_ftp_style_1": "ftp_include_ext",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 75,
        "description": "Login name/user for the ftp server e.g. \"PASS00269\" in peptideatlas.orgftp download '' : None",
        "get_ftp_style_1": "ftp_login",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 76,
        "description": "Maximum number of files that will be downloaded 0 : No Limitation",
        "get_ftp_style_1": "ftp_max_number_of_files",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 77,
        "description": "Default ftp download path '' : None",
        "get_ftp_style_1": "ftp_output_folder",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 78,
        "description": "ftp download password '' : None",
        "get_ftp_style_1": "ftp_password",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str_password"
    },
    {
        "_id": 79,
        "description": "ftp download URL, will fail if it is not set by the user '' : None",
        "get_ftp_style_1": "ftp_url",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 80,
        "deepnovo_style_1": "header_translations",
        "description": "Translate output headers into Ursgal unify_csv style headers 'None' : None",
        "kojak_percolator_style_1": "header_translations",
        "msamanda_style_1": "header_translations",
        "msfragger_style_1": "header_translations",
        "msgfplus_style_1": "header_translations",
        "novor_style_1": "header_translations",
        "omssa_style_1": "header_translations",
        "pepnovo_style_1": "header_translations",
        "pglyco_db_style_1": "header_translations",
        "pglyco_fdr_style_1": "header_translations",
        "pipi_style_1": "header_translations",
        "triggers_rerun": true,
        "value_translations": {
            "deepnovo_style_1": {
                "predicted_position_score": "DeepNovo:aaScore",
                "predicted_score": "DeepNovo:score",
                "predicted_sequence": "Sequence",
                "scan": "Spectrum ID"
            },
            "kojak_percolator_style_1": {
                "PSMId": "PSMId",
                "peptide": "Sequence",
                "posterior_error_prob": "PEP",
                "proteinIds": "Protein ID",
                "q-value": "q-value",
                "score": "Kojak:score"
            },
            "msamanda_style_1": {
                "Amanda Score": "Amanda:Score",
                "Charge": "Charge",
                "Filename": "Filename",
                "Modifications": "Modifications",
                "Protein Accessions": "proteinacc_start_stop_pre_post_;",
                "RT": "Retention Time (s)",
                "Rank": "Rank",
                "Scan Number": "Spectrum ID",
                "Sequence": "Sequence",
                "Title": "Spectrum Title",
                "Weighted Probability": "Amanda:Weighted Probability",
                "m/z": "Exp m/z"
            },
            "msfragger_style_1": {
                "Downstream Amino Acid": "Sequence Post AA",
                "Hit rank": "Rank",
                "Hyperscore": "MSFragger:Hyperscore",
                "Intercept of expectation model (expectation in log space)": "MSFragger:Intercept of expectation model (expectation in log space)",
                "Mass difference": "Mass Difference",
                "Matched fragment ions": "MSFragger:Matched fragment ions",
                "Neutral mass of peptide": "MSFragger:Neutral mass of peptide",
                "Next score": "MSFragger:Next score",
                "Number of missed cleavages": "MSFragger:Number of missed cleavages",
                "Number of tryptic termini": "MSFragger:Number of tryptic termini",
                "Peptide Sequence": "Sequence",
                "Precursor charge": "Charge",
                "Precursor neutral mass (Da)": "MSFragger:Precursor neutral mass (Da)",
                "Protein": "Protein ID",
                "Retention time (minutes)": "Retention Time (s)",
                "ScanID": "Spectrum ID",
                "Slope of expectation model (expectation in log space)": "MSFragger:Slope of expectation model (expectation in log space)",
                "Total possible number of matched theoretical fragment ions": "MSFragger:Total possible number of matched theoretical fragment ions",
                "Upstream Amino Acid": "Sequence Pre AA",
                "Variable modifications detected": "Modifications"
            },
            "msgfplus_style_1": {
                "#SpecFile": "Raw data location",
                "Charge": "Charge",
                "DeNovoScore": "MS-GF:DeNovoScore",
                "EValue": "MS-GF:EValue",
                "MSGFScore": "MS-GF:RawScore",
                "Peptide": "Sequence",
                "Precursor": "Exp m/z",
                "Protein": "proteinacc_start_stop_pre_post_;",
                "ScanNum": "Spectrum ID",
                "SpecEValue": "MS-GF:SpecEValue",
                "SpecFile": "Raw data location",
                "Title": "Spectrum Title"
            },
            "novor_style_1": {
                " RT": "Retention Time (s)",
                " aaScore": "Novor:aaScore",
                " err(data-denovo)": "Error (exp-calc)",
                " mz(data)": "Exp m/z",
                " pepMass(denovo)": "Calc mass",
                " peptide": "Sequence",
                " ppm(1e6*err/(mz*z))": "Error (ppm)",
                " scanNum": "Spectrum ID",
                " score": "Novor:score",
                " z": "Charge",
                "# id": "Novor:id"
            },
            "omssa_style_1": {
                " Accession": "Accession",
                " Charge": "Charge",
                " Defline": "proteinacc_start_stop_pre_post_;",
                " E-value": "OMSSA:evalue",
                " Filename/id": "Spectrum Title",
                " Mass": "Exp m/z",
                " Mods": "Modifications",
                " NIST score": "NIST score",
                " P-value": "OMSSA:pvalue",
                " Peptide": "Sequence",
                " Start": "Start",
                " Stop": "Stop",
                " Theo Mass": "Calc m/z",
                " gi": "gi",
                "Spectrum number": "Spectrum ID"
            },
            "pepnovo_style_1": {
                "#Index": "Pepnovo:id",
                "C-Gap": "Pepnovo:C-Gap",
                "CumProb": "Pepnovo:CumProb",
                "N-Gap": "Pepnovo:N-Gap",
                "PnvScr": "Pepnovo:PnvScr",
                "RnkScr": "Pepnovo:RnkScr",
                "[M+H]": "Calc mass(Da)",
                "output_aa_probs": "Pepnovo:aaScore"
            },
            "pglyco_db_style_1": {
                "Charge": "Charge",
                "CoreFuc": "CoreFuc",
                "CoreMatched": "CoreMatched",
                "GlyDecoy": "GlyDecoy",
                "GlyFrag": "Glycan Fragments",
                "GlyID": "Glycan ID",
                "GlyIonRatio": "GlyIonRatio",
                "GlyMass": "Glycan Mass",
                "GlyScore": "pGlyco:GlyScore",
                "GlySite": "Glycosite",
                "GlySpec": "Spectrum Title",
                "Glycan(H,N,A,G,F)": "Glycan",
                "MassDeviation": "Mass Difference",
                "Mod": "Modifications",
                "PPM": "Accuracy (ppm)",
                "PepDecoy": "PepDecoy",
                "PepIonRatio": "PepIonRatio",
                "PepScore": "pGlyco:PepScore",
                "PepSpec": "Spectrum Title",
                "Peptide": "Sequence",
                "PeptideMH": "Calc Mass",
                "PlausibleStruct": "Plausible Glycan Structure",
                "PrecursorMH": "Exp Mass",
                "PrecursorMZ": "Exp m/z",
                "RT": "Retention Time (s)",
                "Rank": "Rank",
                "RawName": "Spectrum Title",
                "Scan": "Spectrum ID",
                "TotalScore": "pGlyco:TotalScore"
            },
            "pglyco_fdr_style_1": {
                "Charge": "Charge",
                "CoreFuc": "CoreFuc",
                "CoreMatched": "CoreMatched",
                "GlyDecoy": "GlyDecoy",
                "GlyFrag": "Glycan Fragments",
                "GlyID": "Glycan ID",
                "GlyIonRatio": "GlyIonRatio",
                "GlyMass": "Glycan Mass",
                "GlyScore": "pGlyco:GlyScore",
                "GlySite": "Glycosite",
                "GlySpec": "Spectrum Title",
                "Glycan(H,N,A,G,F)": "Glycan",
                "GlycanFDR": "Glycan FDR",
                "MassDeviation": "Mass Difference",
                "Mod": "Modifications",
                "PPM": "Accuracy (ppm)",
                "PepDecoy": "PepDecoy",
                "PepIonRatio": "PepIonRatio",
                "PepScore": "pGlyco:PepScore",
                "PepSpec": "Spectrum Title",
                "Peptide": "Sequence",
                "PeptideFDR": "Peptide FDR",
                "PeptideMH": "Calc Mass",
                "PlausibleStruct": "Plausible Glycan Structure",
                "PrecursorMH": "Exp Mass",
                "PrecursorMZ": "Exp m/z",
                "RT": "Retention Time (s)",
                "Rank": "Rank",
                "RawName": "Spectrum Title",
                "Scan": "Spectrum ID",
                "TotalFDR": "q-value",
                "TotalScore": "pGlyco:TotalScore"
            },
            "pipi_style_1": {
                "A_score": "A-Score",
                "MGF_title": "Spectrum Title",
                "MS1_pearson_correlation_coefficient": "PIPI:MS1_pearson_correlation_coefficient",
                "abs_ppm": "PIPI:abs_ppm",
                "charge": "Charge",
                "delta_C_n": "PIPI:delta_C_n",
                "exp_mass": "Exp m/z",
                "isotope_correction": "PIPI:isotope_correction",
                "labelling": "Label",
                "other_PTM_patterns": "PIPI:other_PTM_patterns",
                "peptide": "Sequence",
                "protein_ID": "Protein ID",
                "scan_num": "Spectrum ID",
                "score": "PIPI:score",
                "theo_mass": "Calc m/z"
            }
        },
        "value_type": "str"
    },
    {
        "_id": 81,
        "description": "The name of the annotation to plot in the heatmap",
        "heatmap_style_1": "heatmap_annotation_field_name",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 82,
        "description": "Box style for the heatmap",
        "heatmap_style_1": "heatmap_box_style",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 83,
        "description": "Color gradient for the heatmap",
        "heatmap_style_1": "heatmap_color_gradient",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 84,
        "description": "The position of each column in the heatmap is given as a dict with keys corresponding to the position and values correspondingto the column name, e.g: {\"0\" : \"Ratio1_2\", \"1\" : \"Ratio2_3\"}",
        "heatmap_style_1": "heatmap_column_positions",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 85,
        "description": "The suffix to identify the value error holding columns",
        "heatmap_style_1": "heatmap_error_suffix",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 86,
        "description": "The name of the identifier to plot in the heatmap",
        "heatmap_style_1": "heatmap_identifier_field_name",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 87,
        "description": "Maximum value for the color gradient",
        "heatmap_style_1": "heatmap_max_value",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 88,
        "description": "Minimum vaue for the color gradient",
        "heatmap_style_1": "heatmap_min_value",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 89,
        "description": "The suffix to identify the value columns, which should be plotted",
        "heatmap_style_1": "heatmap_value_suffix",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 90,
        "description": "Exension for helper files",
        "triggers_rerun": true,
        "ucontroller_style_1": "helper_extension",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 91,
        "description": "Default http download path '' : None",
        "get_http_style_1": "http_output_folder",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 92,
        "description": "http download URL, will fail if it is not set by the user '' : None",
        "get_http_style_1": "http_url",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 93,
        "description": "Type of mass spectrometer (used to determine the scoring model)",
        "kojak_style_1": "instrument",
        "moda_style_1": "Instrument",
        "msgfplus_style_1": "-inst",
        "novor_style_1": "massAnalyzer",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "FTICR": "1",
                "high_res_ltq": "0",
                "low_res_ltq": "0",
                "q_exactive": "0"
            },
            "moda_style_1": {
                "high_res_ltq": "ESI-TRAP",
                "low_res_ltq": "ESI-TRAP",
                "q_exactive": "ESI-TRAP",
                "tof": "ESI-QTOF"
            },
            "msgfplus_style_1": {
                "high_res_ltq": "1",
                "low_res_ltq": "0",
                "q_exactive": "3",
                "tof": "2"
            },
            "novor_style_1": {
                "high_res_ltq": "Trap",
                "low_res_ltq": "Trap",
                "q_exactive": "FT",
                "tof": "TOF"
            }
        },
        "value_type": "select"
    },
    {
        "_id": 94,
        "csv2counted_results_style_1": "identifier_column_names",
        "description": "The (combination of) specified csv column name(s) are used as identifiers. E.g. to count the number of peptides for these identifiers. The parameter \"count_column_names\" defines the countable elements.",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 95,
        "description": "The ion mode that has been used for acquiring mass spectra (positive or negative)",
        "mzml2mgf_style_1": "ion_mode",
        "triggers_rerun": true,
        "value_translations": {
            "mzml2mgf_style_1": {
                "negative": "-",
                "positive": "+"
            }
        },
        "value_type": "select"
    },
    {
        "_id": 96,
        "description": "Low intensity cutoff as a fraction of max peak",
        "msfragger_style_1": "minimum_ratio",
        "omssa_style_1": "-cl",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 97,
        "description": "Exension for .json files",
        "triggers_rerun": true,
        "ucontroller_style_1": "json_extension",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 98,
        "description": "X!tandem searches for peptides broken between Asp (D) and Pro (P) for every enzyme. Therefore, it reports peptides that are not enzymatically cleaved. Specify, if those should be kept during unify_csv or removed.",
        "triggers_rerun": true,
        "unify_csv_style_1": "keep_asp_pro_broken_peps",
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 99,
        "description": "The kernel function of the support vector machine used for PSM post-processing ('rbf', 'linear', 'poly' or 'sigmoid')",
        "svm_style_1": "kernel",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 100,
        "description": "MS1 are centroided data: True or False",
        "kojak_style_1": "kojak_MS1_centroid",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 101,
        "description": "MS1 resolution",
        "kojak_style_1": "kojak_MS1_resolution",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 102,
        "description": "MS2 are centroided data: True or False",
        "kojak_style_1": "kojak_MS2_centroid",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 103,
        "description": "MS2 resolution",
        "kojak_style_1": "kojak_MS2_resolution",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 104,
        "csv2counted_results_style_1": "keep_column_names",
        "description": "List of column headers which are are not used as identifiers but kept in the output, e.g. when counting [\"Sequence\", \"Modifications\"] the column [\"Protein ID\"] could be specified here. Multiple entries for one identifier (e.g. when identifier_column_names = [\"Potein ID\"] and keep_column_names = [\"Sequence\"]) are seperated by \"<#>\".",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 105,
        "description": "To search differential modifications on cross-linked peptides: diff_mods_on_xl = 1",
        "kojak_style_1": "kojak_diff_mods_on_xl",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 106,
        "description": "Values between 0 and 1 to describe 18O APE For example, 0.25 equals 25 APE",
        "kojak_style_1": "kojak_enrichment",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 107,
        "description": "Activate (True) or deactivate (False) output as pepXML",
        "kojak_style_1": "kojak_export_pepXML",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 108,
        "description": "Activate (True) or deactivate (False) output for percolator",
        "kojak_style_1": "kojak_export_percolator",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 109,
        "description": "fragment_bin_offset and fragment_bin_size influence algorithm precision and memory usage. They should be set appropriately for the data analyzed. For ion trap ms/ms: 1.0005 size, 0.4 offset For high res ms/ms: 0.03 size, 0.0 offset",
        "kojak_style_1": "kojak_fragment_bin_offset",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 110,
        "description": "fragment_bin_offset and fragment_bin_size influence algorithm precision and memory usage. They should be set appropriately for the data analyzed. For ion trap ms/ms: 1.0005 size, 0.4 offset For high res ms/ms: 0.03 size, 0.0 offset",
        "kojak_style_1": "kojak_fragment_bin_size",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 111,
        "description": "To search for mono-linked cross-linker on cross-linked peptides: mono_links_on_xl = 1",
        "kojak_style_1": "kojak_mono_links_on_xl",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 112,
        "description": "Defines the output format of Kojak for Percolator",
        "kojak_style_1": "kojak_percolator_version",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 113,
        "description": "prefer precursor mono mass predicted by instrument software. Available values: ignore_previous: previous predictions are ignored only_previous: only previous predictions are used supplement: predictions are supplemented with additional analysis",
        "kojak_style_1": "kojak_prefer_precursor_pred",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "ignore_previous": 0,
                "only_previous": 1,
                "supplement": 2
            }
        },
        "value_type": "select"
    },
    {
        "_id": 114,
        "description": "True, if spectrum should be processed by kojak",
        "kojak_style_1": "kojak_spectrum_processing",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 115,
        "description": "number of top scoring single peptides to combine in relaxed analysis",
        "kojak_style_1": "kojak_top_count",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 116,
        "description": "Max protein name character to export, 0=off",
        "kojak_style_1": "kojak_truncate_prot_names",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 117,
        "description": "Generally speeds up analysis. Special cases cause reverse effect, thus this is allowed to be disabled. True if it should be used.",
        "kojak_style_1": "kojak_turbo_button",
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 118,
        "description": "15N if the corresponding amino acid labeling was applied",
        "moda_style_1": "label",
        "msamanda_style_1": "label",
        "msfragger_style_1": "label",
        "msgfplus_style_1": "label",
        "myrimatch_style_1": "label",
        "omssa_style_1": [
            "-tem",
            "-tom"
        ],
        "pipi_style_1": "15N",
        "pyqms_style_1": "label",
        "triggers_rerun": true,
        "value_translations": {
            "pipi_style_1": {
                "14N": 0,
                "15N": 1
            }
        },
        "value_type": "select",
        "xtandem_style_1": "protein, modified residue mass file"
    },
    {
        "_id": 119,
        "description": "Machine offset, m/z values will be corected/shifted by the given value.",
        "mzml2mgf_style_1": "machine_offset_in_ppm",
        "pyqms_style_1": "MACHINE_OFFSET_IN_PPM",
        "sugarpy_plot_style_1": "MACHINE_OFFSET_IN_PPM",
        "sugarpy_run_style_1": "MACHINE_OFFSET_IN_PPM",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 120,
        "description": "Maximum number of peaks from a spectrum used.",
        "kojak_style_1": "max_accounted_observed_peaks",
        "msfragger_style_1": "use_topN_peaks",
        "myrimatch_style_1": "MaxPeakCount",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, total peaks"
    },
    {
        "_id": 121,
        "deepnovo_style_1": "num_missed_cleavage",
        "description": "Maximum number of missed cleavages per peptide",
        "kojak_style_1": "max_missed_cleavages",
        "moda_style_1": "MissedCleavage",
        "msamanda_style_1": "missed_cleavages",
        "msfragger_style_1": "allowed_missed_cleavage",
        "msgfplus_style_1": "-maxMissedCleavages",
        "myrimatch_style_1": "MaxMissedCleavages",
        "omssa_style_1": "-v",
        "pglyco_db_style_1": "max_miss_cleave",
        "pipi_style_1": "missed_cleavage",
        "triggers_rerun": true,
        "unify_csv_style_1": "max_missed_cleavages",
        "upeptide_mapper_style_1": "max_missed_cleavages",
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "scoring, maximum missed cleavage sites"
    },
    {
        "_id": 122,
        "description": "Maximal number of variable modification alternatives, given as C in 2^C",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "protein, ptm complexity"
    },
    {
        "_id": 123,
        "description": "Maximum modification size to consider (in Da)",
        "moda_style_1": "MaxModSize",
        "pipi_style_1": "max_ptm_mass",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 124,
        "description": "Maximal number of modifications per peptide",
        "kojak_style_1": "max_num_mods",
        "msamanda_style_1": "MaxNoDynModifs",
        "msgfplus_style_1": "NumMods",
        "myrimatch_style_1": "MaxDynamicMods",
        "pglyco_db_style_1": "max_var_modify_num",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 125,
        "description": "Maximum number of potential modification sites for a specific modification per peptide. Peptides with a higher number are discarded, due to a too high complexity.",
        "msamanda_style_1": "MaxNumberModSites",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 126,
        "description": "Maximum number of same neutral losses per peptide regarding water and ammonia losses.",
        "msamanda_style_1": "MaxNumberNeutralLoss",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 127,
        "description": "Maximum number of same neutral losses per peptide regarding modification specific losses.",
        "msamanda_style_1": "MaxNumberNeutralLossModificati",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 128,
        "description": "Max number of ions in each series being searched 0 : all",
        "omssa_style_1": "-sp",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "all": 0
            }
        },
        "value_type": "int"
    },
    {
        "_id": 129,
        "description": "Maximum number of residues that can be occupied by each variable modification (maximum of 5)",
        "msamanda_style_1": "MaxNoModifs",
        "msfragger_style_1": "max_variable_mods_per_mod",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 130,
        "description": "Maximal number of modification sites per peptide for a specific modification, given as a dictionary: {unimod_name : number}",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict",
        "xtandem_style_1": "residue, potential modification mass"
    },
    {
        "_id": 131,
        "description": "Highest e-value for reported peptides",
        "omssa_style_1": "-he",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float",
        "xtandem_style_1": "output, maximum valid expectation value"
    },
    {
        "_id": 132,
        "description": "Maximal length of a peptide",
        "msfragger_style_1": "digest_max_length",
        "msgfplus_style_1": "-maxLength",
        "myrimatch_style_1": "MaxPeptideLength",
        "omssa_style_1": "-nox",
        "pglyco_db_style_1": "max_peptide_len",
        "pipi_style_1": "max_peptide_length",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 133,
        "description": "Maximal peptide variants, new default defined by msfragger",
        "msfragger_style_1": "max_variable_mods_combinations",
        "msgfplus_style_1": "-maxLength",
        "myrimatch_style_1": "MaxPeptideVariants",
        "omssa_style_1": "-nox",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 134,
        "deepnovo_style_1": [
            "denovo_input_file",
            "hybrid_input_file",
            "db_input_file"
        ],
        "description": "Path to input .mgf file '' : None",
        "moda_style_1": "Spectra",
        "msamanda_style_1": "mgf_input_file",
        "msgfplus_style_1": "-s",
        "novor_style_1": "-f",
        "omssa_style_1": "-fm",
        "pepnovo_style_1": "-file",
        "pglyco_db_style_1": "file1",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str",
        "xtandem_style_1": "spectrum, path"
    },
    {
        "_id": 135,
        "description": "Minimum modification size to consider (in Da)",
        "moda_style_1": "MinModSize",
        "pipi_style_1": "min_ptm_mass",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 136,
        "description": "Lowest score for reported peptides. If set to '-1e-10', default values fo each engine will be used. -1e-10 = 'default'",
        "myrimatch_style_1": "MinResultScore",
        "pepnovo_style_1": "-min_filter_prob",
        "triggers_rerun": true,
        "value_translations": {
            "myrimatch_style_1": {
                "-1e-10": 1e-07
            },
            "pepnovo_style_1": {
                "-1e-10": 0.9
            }
        },
        "value_type": "float"
    },
    {
        "_id": 137,
        "description": "Minimal length of a peptide",
        "msamanda_style_1": "MinimumPepLength",
        "msfragger_style_1": "digest_min_length",
        "msgfplus_style_1": "-minLength",
        "myrimatch_style_1": "MinPeptideLength",
        "omssa_style_1": "-no",
        "pglyco_db_style_1": "min_peptide_len",
        "pipi_style_1": "min_peptide_length",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 138,
        "description": "Minimum number of precursors that match a spectrum.",
        "omssa_style_1": "-pc",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 139,
        "description": "Mimimum number of matched ions required for a peptide to be scored, MSFragger default: 4",
        "msfragger_style_1": "min_matched_fragments",
        "myrimatch_style_1": "MinMatchedFragments",
        "omssa_style_1": "-hm",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "scoring, minimum ion count"
    },
    {
        "_id": 140,
        "description": "Mimimum number of peaks in the spectrum to be considered. MSFragger default: 15",
        "msfragger_style_1": "minimum_peaks",
        "omssa_style_1": "-hs",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, minimum peaks"
    },
    {
        "_id": 141,
        "description": "Allowed number of modifications per peptide in ModA BlindMode. Available values: no_modification one_modification no_limit",
        "moda_style_1": "BlindMode",
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": {
                "no_limit": 2,
                "no_modification": 0,
                "one_modification": 1
            }
        },
        "value_type": "select"
    },
    {
        "_id": 142,
        "description": "If True, fragment tolerance is set as the same as precursor tolerance, when the peptide mass is significantly small, such that fragment tolerance is larger than precursor tolerance",
        "moda_style_1": "HighResolution",
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": {
                "false": "OFF",
                "true": "ON"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 143,
        "description": "MODa specific protocol to enable scoring parameters for labeled samples.",
        "moda_style_1": "Protocol",
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": {
                "None": "NONE"
            }
        },
        "value_type": "select"
    },
    {
        "_id": 144,
        "deepnovo_style_1": "modifications",
        "description": "Modifications are given as a list of strings, each representing the modification of one amino acid. The string consists of four informations seperated by comma: 'amino acid, type, position, unimod name or id' amino acid : specify the modified amino acid as a single letter, use '*' if the amino acid is variable type : specify if it is a fixed (fix) or potential (opt) modification position : specify the position within the protein/peptide (Prot-N-term, Prot-C-term), use 'any' if the positon is variable unimod name or id: specify the unimod PSI-MS Name or unimod Accession # (see unimod.org) Examples: [ 'M,opt,any,Oxidation' ] - potential oxidation of Met at any position within a peptide [ '*,opt,Prot-N-term,Acetyl' ] - potential acetylation of any amino acid at the N-terminus of a protein [ 'S,opt,any,Phospho' ] - potential phosphorylation of Serine at any position within a peptide [ 'C,fix,any,Carbamidomethyl', 'N,opt,any,Deamidated', 'Q,opt,any,Deamidated' ] - fixed carbamidomethylation of Cys and potential deamidation of Asn and/or Gln at any position within a peptide Additionally, userdefined modifications can be given and are written to a userdefined_unimod.xml in ursgal/kb/ext. Userdefined modifications need to have a unique name instead of the unimod name the chemical composition needs to be given as a Hill notation on the fifth position in the string Example: [ 'S,opt,any,New_mod,C2H5N1O3' ]",
        "kojak_style_1": "modifications",
        "moda_style_1": "ADD",
        "msamanda_style_1": "modifications",
        "msfragger_style_1": "modifications",
        "msgfplus_style_1": "-mod",
        "myrimatch_style_1": [
            "DynamicMods",
            "StaticMods"
        ],
        "novor_style_1": [
            "variableModifications",
            "fixedModifications"
        ],
        "omssa_style_1": [
            "-mv",
            "mf"
        ],
        "pepnovo_style_1": "-PTMs",
        "pglyco_db_style_1": "modifications",
        "pipi_style_1": "modifications",
        "pyqms_style_1": "modifications",
        "triggers_rerun": true,
        "unify_csv_style_1": "modifications",
        "upeptide_mapper_style_1": "modifications",
        "value_translations": {},
        "value_type": "list",
        "xtandem_style_1": [
            "residue, modification mass",
            "residue, potential modification mass",
            "protein, N-terminal residue modification mass",
            "protein, C-terminal residue modification mass",
            "protein, C-terminal residue modification mass",
            "protein, quick acetyl",
            "protein, quick pyrolidone"
        ]
    },
    {
        "_id": 145,
        "description": "Cross-link and mono-link masses allowed. May have more than one of each parameter. Format for mono_link is: [amino acids] [mass mod] One or more amino acids (uppercase only!!) can be specified for each linkage moiety. Use lowercase 'n' or 'c' to indicate protein N-terminus or C-terminus",
        "kojak_style_1": "mono_link_definition",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 146,
        "description": "MS-GF+ specific protocol identifier. Protocols are used to enable scoring parameters for enriched and/or labeled samples.",
        "msgfplus_style_1": "-protocol",
        "triggers_rerun": true,
        "value_translations": {
            "msgfplus_style_1": {
                "0": 0,
                "1": 1,
                "2": 2,
                "3": 3
            }
        },
        "value_type": "select"
    },
    {
        "_id": 147,
        "description": "Suppresses reporting of PSM if top hit has expectation greater than this threshold",
        "msfragger_style_1": "output_max_expect",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 148,
        "description": "Track top N unmodified peptide results separately from main results internally for boosting features. Should be set to a number greater than output_report_topN if zero bin boosting is desired.",
        "msfragger_style_1": "track_zero_topN",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 149,
        "description": "Ranks a zero-bin hit above all non-zero-bin hit if it has expectation less than this value.",
        "msfragger_style_1": "zero_bin_accept_expect",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 150,
        "description": "Multiplies expect value of PSMs in the zero-bin during results ordering (set to less than 1 for boosting)",
        "msfragger_style_1": "zero_bin_mult_expect",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 151,
        "description": "Inserts complementary ions corresponding to the top N most intense fragments in each experimental spectrum. Useful for recovery of modified peptides near C-terminal in open search. Should be set to 0 (disabled) otherwise.",
        "msfragger_style_1": "add_topN_complementary",
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 152,
        "description": "Minimum number of matched peaks in PSM for inclusion in statistical modeling",
        "msfragger_style_1": "min_fragments_modelling",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 153,
        "description": "Determines which msgfplus mzid conversion node should be used e.g. \"msgfplus2csv_v2017_07_04\"",
        "triggers_rerun": true,
        "ucontroller_style_1": "msgfplus_mzid_converter_version",
        "value_translations": {
            "ucontroller_style_1": {
                "msgfplus_v2016_09_16": "msgfplus2csv_py_v1_0_0",
                "msgfplus_v2017_01_27": "msgfplus2csv_py_v1_0_0",
                "msgfplus_v2018_01_30": "msgfplus2csv_py_v1_0_0",
                "msgfplus_v2018_06_28": "msgfplus2csv_py_v1_0_0",
                "msgfplus_v2018_09_12": "msgfplus2csv_py_v1_0_0",
                "msgfplus_v2019_01_22": "msgfplus2csv_py_v1_0_0",
                "msgfplus_v2019_04_18": "msgfplus2csv_py_v1_0_0",
                "msgfplus_v9979": "msgfplus2csv_py_v1_0_0"
            }
        },
        "value_type": "str"
    },
    {
        "_id": 154,
        "description": "Myrimatch ClassSizeMultiplier",
        "myrimatch_style_1": "ClassSizeMultiplier",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 155,
        "description": "Myrimatch NumIntensityClasses",
        "myrimatch_style_1": "NumIntensityClasses",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 156,
        "description": "Myrimatch NumMzFidelityClasses",
        "myrimatch_style_1": "NumMzFidelityClasses",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 157,
        "description": "Myrimatch ProteinSamplingTime",
        "myrimatch_style_1": "ProteinSamplingTime",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 158,
        "description": "Use Myrimatch UseSmartPlusThreeModel",
        "myrimatch_style_1": "UseSmartPlusThreeModel",
        "triggers_rerun": true,
        "value_translations": {
            "myrimatch_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 159,
        "description": "Myrimatch TicCutoffPercentage",
        "myrimatch_style_1": "TicCutoffPercentage",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 160,
        "description": "Compress mzidentml_lib output files",
        "mzidentml_style_1": "-compress",
        "triggers_rerun": true,
        "value_translations": {
            "mzidentml_style_1": {
                "false": "false",
                "true": "true"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 161,
        "description": "mzidentml converter version: version name",
        "triggers_rerun": true,
        "ucontroller_style_1": "mzidentml_converter_version",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 162,
        "description": "Defines which paramters shoul be exporte by mzidentml_lib",
        "mzidentml_style_1": "-exportType",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 163,
        "description": "Defines the mzidentml_lib function to be used. Note: only 'Mzid2Csv' is supported so far",
        "mzidentml_style_1": "mzidentml_function",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 164,
        "description": "Include fragmentation in mzidentml_lib output",
        "mzidentml_style_1": "-outputFragmentation",
        "triggers_rerun": true,
        "value_translations": {
            "mzidentml_style_1": {
                "false": "false",
                "true": "true"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 165,
        "description": "Verbose mzidentml_lib output",
        "mzidentml_style_1": "-verboseOutput",
        "triggers_rerun": true,
        "value_translations": {
            "mzidentml_style_1": {
                "false": "false",
                "true": "true"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 166,
        "description": "mzml to mgf converter version: version name",
        "triggers_rerun": true,
        "ucontroller_style_1": "mzml2mgf_converter_version",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 167,
        "description": "Neutral losses enabled for spectrum algorithm: set True or False",
        "triggers_rerun": true,
        "value_translations": {
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "spectrum, use neutral loss window"
    },
    {
        "_id": 168,
        "description": "Sets the centre of the window for ignoring neutral molecule losses.",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, neutral loss mass"
    },
    {
        "_id": 169,
        "description": "Neutral loss window: sets the width of the window for ignoring neutral molecule losses.",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, neutral loss window"
    },
    {
        "_id": 170,
        "description": "Used noise suppresssion",
        "triggers_rerun": true,
        "value_translations": {
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "spectrum, use noise suppression"
    },
    {
        "_id": 171,
        "description": "Maximum number of PSMs (sorted by score, starting with the best scoring PSM) that are compared",
        "sanitize_csv_style_1": "num_compared_psms",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 172,
        "description": "Maximum number of hits retained per precursor charge state per spectrum during the search",
        "omssa_style_1": "-hl",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 173,
        "description": "Number of decimals for intensity (peak)",
        "mzml2mgf_style_1": "number_of_i_decimals",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 174,
        "description": "Maximum number of peptide spectrum matches to report for each spectrum",
        "msamanda_style_1": "max_rank",
        "msfragger_style_1": "output_report_topN",
        "msgfplus_style_1": "-n",
        "myrimatch_style_1": "MaxResultRank",
        "omssa_style_1": "-hc",
        "pepnovo_style_1": "-num_solutions",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 175,
        "description": "Number of decimals for m/z mass",
        "mzml2mgf_style_1": "number_of_mz_decimals",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 176,
        "description": "Omssa: eliminate charge reduced precursors in spectra",
        "omssa_style_1": "-cp",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 177,
        "description": "Omssa: number of peaks allowed in single charge window",
        "omssa_style_1": "-h1",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 178,
        "description": "Omssa: number of peaks allowed in double charge window",
        "omssa_style_1": "-h2",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 179,
        "description": "Omssa: number of m/z values corresponding to the most intense peaks that must include one match to the theoretical peptide",
        "omssa_style_1": "-ht",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 180,
        "description": "Omssa: the maximum number of mass ladders to generate per database peptide",
        "omssa_style_1": "-mm",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 181,
        "description": "Omssa: automatic mass tolerance adjustment fraction",
        "omssa_style_1": "-ta",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 182,
        "description": "Omssa: threshold in Da above which the mass of neutron should be added in exact mass search",
        "omssa_style_1": "-tex",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 183,
        "description": "Omssa: verbose info print",
        "omssa_style_1": "-ni",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "false": "",
                "true": "-ni"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 184,
        "description": "Omssa: single charge window in Da",
        "omssa_style_1": "-w1",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 185,
        "description": "Omssa: double charge window in Da",
        "omssa_style_1": "-w2",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 186,
        "description": "Omssa: fraction of peaks below precursor used to determine if spectrum is charge 1",
        "omssa_style_1": "-z1",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 187,
        "description": "Should charge plus one be determined algorithmically?",
        "omssa_style_1": "-zc",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "false": 0,
                "true": 1
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 188,
        "description": "Omssa: how should precursor charges be determined?, use a range",
        "omssa_style_1": "-zcc",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 189,
        "description": "Minimum precursor charge to start considering multiply charged products",
        "omssa_style_1": "-zt",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 190,
        "description": "Output probabilities for each amino acid.",
        "pepnovo_style_1": "-output_aa_probs",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 191,
        "description": "Number of decimals for intensity (peak)",
        "msgfplus_style_1": "-addFeatures",
        "triggers_rerun": true,
        "value_translations": {
            "msgfplus_style_1": {
                "false": "0",
                "true": "1"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 192,
        "description": "Output cumulative probabilities.",
        "pepnovo_style_1": "-output_cum_probs",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 193,
        "description": "Path to output file 'None' : None",
        "generate_target_decoy_style_1": "output_file",
        "merge_csvs_style_1": "output",
        "moda_style_1": "-o",
        "msamanda_style_1": "output_file_incl_path",
        "msgfplus_style_1": "-o",
        "myrimatch_style_1": "output_file_incl_path",
        "mzidentml_style_1": "output_file_incl_path",
        "novor_style_1": "output_file_incl_path",
        "omssa_style_1": "output_file_incl_path",
        "pepnovo_style_1": "output_file_incl_path",
        "percolator_style_1": "output_file_incl_path",
        "qvality_style_1": "-o",
        "sugarpy_plot_style_1": "output_file",
        "sugarpy_run_style_1": "output_file",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str",
        "venndiagram_style_1": "output_file",
        "xtandem_style_1": "output, path"
    },
    {
        "_id": 194,
        "description": "Output file type. If set to 'default', default output file tzpes for each engine are used. Note: not every file type is supported by every engine and usin non-default types might cause problems during conversion to .csv.",
        "omssa_style_1": [
            "-oc",
            "-ox"
        ],
        "thermo_raw_file_parser_style_1": "-f",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                ".csv": "-oc",
                ".omx": "-ox",
                "default": "-oc"
            },
            "thermo_raw_file_parser_style_1": {
                ".mgf": 0,
                ".mzml": 1,
                "default": 1,
                "indexed_mzml": 2,
                "parquet": 3
            },
            "xtandem_style_1": {
                ".mzid": "yes",
                "default": "no"
            }
        },
        "value_type": "select",
        "xtandem_style_1": "output, mzid"
    },
    {
        "_id": 195,
        "description": "Only print spectrum graph nodes with scores.",
        "pepnovo_style_1": "-prm",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 196,
        "description": "Prints spectrum graph scores after normalization and removal of negative scores.",
        "pepnovo_style_1": "-prm_norm",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 197,
        "description": "Output Q-values",
        "msgfplus_style_1": "-showQValue",
        "triggers_rerun": true,
        "value_translations": {
            "msgfplus_style_1": {
                "false": "0",
                "true": "1"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 198,
        "description": "Returns peptide sequences of the specified length (only lengths 3-6 are allowed) 0 : None",
        "pepnovo_style_1": "-tag_length",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 199,
        "description": "version 3 and 4 are the fastest and most memory efficient class versions, version 2 is the classic approach",
        "triggers_rerun": true,
        "upeptide_mapper_style_1": "peptide_mapper_class_version",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 200,
        "description": "determines which upeptide mapper node should be used",
        "triggers_rerun": true,
        "ucontroller_style_1": "peptide_mapper_converter_version",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 201,
        "description": "PIPI mz_bin_offset",
        "pipi_style_1": "mz_bin_offset",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 202,
        "description": "charge dependency of precursor mass tolerance (none or linear)",
        "omssa_style_1": "-tez",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "linear": 1,
                "none": 0
            }
        },
        "value_type": "select"
    },
    {
        "_id": 203,
        "description": "Error range for incorrect carbon isotope parent ion assignment",
        "kojak_style_1": "precursor_isotope_range",
        "msfragger_style_1": "isotope_error",
        "msgfplus_style_1": "-ti",
        "myrimatch_style_1": "MonoisotopeAdjustmentSet",
        "omssa_style_1": "-ti",
        "pepnovo_style_1": "-correct_pm",
        "triggers_rerun": true,
        "unify_csv_style_1": "precursor_isotope_range",
        "value_translations": {
            "kojak_style_1": {
                "0": "0",
                "0,1": "1",
                "0,2": "2"
            },
            "msfragger_style_1": {
                "0": "0",
                "0,1": "0/1",
                "0,2": "0/1/2"
            },
            "myrimatch_style_1": {
                "0": "[0,]",
                "0,1": "[0,1]",
                "0,1,2": "[0,1,2]"
            },
            "omssa_style_1": {
                "0": "0",
                "0,1": "1",
                "0,2": "2"
            },
            "xtandem_style_1": {
                "0": "no",
                "0,1": "yes",
                "0,2": "yes"
            }
        },
        "value_type": "select",
        "xtandem_style_1": "spectrum, parent monoisotopic mass isotope error"
    },
    {
        "_id": 204,
        "deepnovo_style_1": [
            "precursor_mass_tolerance",
            "precursor_mass_ppm"
        ],
        "description": "Lower precursor mass tolerance; maximum negative deviation of measured from calculated parent ion mass.",
        "kojak_style_1": "ppm_tolerance_pre",
        "moda_style_1": "PPMTolerance",
        "msamanda_style_1": "ms1_tol",
        "msfragger_style_1": "precursor_mass_lower",
        "msgfplus_style_1": "-t",
        "myrimatch_style_1": "MonoPrecursorMzTolerance",
        "novor_style_1": "precursorErrorTol",
        "omssa_style_1": "-te",
        "pepnovo_style_1": "-pm_tolerance",
        "pglyco_db_style_1": "search_precursor_tolerance",
        "pipi_style_1": "ms1_tolerance",
        "pyqms_style_1": "REL_MZ_RANGE",
        "sugarpy_plot_style_1": "REL_MZ_RANGE",
        "sugarpy_run_style_1": "REL_MZ_RANGE",
        "triggers_rerun": true,
        "unify_csv_style_1": "precursor_mass_tolerance_minus",
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, parent monoisotopic mass error minus"
    },
    {
        "_id": 205,
        "deepnovo_style_1": [
            "precursor_mass_tolerance",
            "precursor_mass_ppm"
        ],
        "description": "Upper precursor mass tolerance; maximum positive deviation of measured from calculated parent ion mass.",
        "kojak_style_1": "ppm_tolerance_pre",
        "moda_style_1": "PPMTolerance",
        "msamanda_style_1": "ms1_tol",
        "msfragger_style_1": "precursor_mass_upper",
        "msgfplus_style_1": "-t",
        "myrimatch_style_1": "MonoPrecursorMzTolerance",
        "novor_style_1": "precursorErrorTol",
        "omssa_style_1": "-te",
        "pepnovo_style_1": "-pm_tolerance",
        "pglyco_db_style_1": "search_precursor_tolerance",
        "pipi_style_1": "ms1_tolerance",
        "pyqms_style_1": "REL_MZ_RANGE",
        "sugarpy_plot_style_1": "REL_MZ_RANGE",
        "sugarpy_run_style_1": "REL_MZ_RANGE",
        "triggers_rerun": true,
        "unify_csv_style_1": " precursor_mass_tolerance_minus",
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, parent monoisotopic mass error plus"
    },
    {
        "_id": 206,
        "deepnovo_style_1": [
            "precursor_mass_tolerance",
            "precursor_mass_ppm"
        ],
        "description": "Precursor mass tolerance unit: available in ppm (parts-per-millon), da (Dalton) or mmu (Milli mass unit)",
        "moda_style_1": "PPMTolerance",
        "msamanda_style_1": "ms1_tol unit",
        "msfragger_style_1": "precursor_mass_units",
        "msgfplus_style_1": "-t",
        "myrimatch_style_1": "MonoPrecursorMzTolerance",
        "novor_style_1": "precursorErrorTol",
        "omssa_style_1": "-teppm",
        "pepnovo_style_1": "precursor_mass_tolerance_unit",
        "pglyco_db_style_1": "search_precursor_tolerance_type",
        "pipi_style_1": "ms1_tolerance_unit",
        "pyqms_style_1": "REL_MZ_RANGE",
        "sugarpy_plot_style_1": "REL_MZ_RANGE",
        "sugarpy_run_style_1": "REL_MZ_RANGE",
        "triggers_rerun": true,
        "value_translations": {
            "msamanda_style_1": {
                "da": "Da"
            },
            "msfragger_style_1": {
                "da": 0,
                "ppm": 1
            },
            "msgfplus_style_1": {
                "da": "Da"
            },
            "myrimatch_style_1": {
                "da": "Da"
            },
            "novor_style_1": {
                "da": "Da"
            },
            "omssa_style_1": {
                "da": "",
                "ppm": "-teppm"
            },
            "pglyco_db_style_1": {
                "da": "Da"
            },
            "pipi_style_1": {
                "da": 0,
                "ppm": 1
            },
            "xtandem_style_1": {
                "da": "Daltons"
            }
        },
        "value_type": "select",
        "xtandem_style_1": "spectrum, parent monoisotopic mass error units"
    },
    {
        "_id": 207,
        "description": "Precursor mass type: monoisotopic or average",
        "msamanda_style_1": "monoisotopic",
        "myrimatch_style_1": "PrecursorMzToleranceRule",
        "omssa_style_1": "-tem",
        "triggers_rerun": true,
        "value_translations": {
            "msamanda_style_1": {
                "average": "false",
                "monoisotopic": "true"
            },
            "myrimatch_style_1": {
                "average": "average",
                "monoisotopic": "mono"
            },
            "omssa_style_1": {
                "average": "1",
                "monoisotopic": "0"
            }
        },
        "value_type": "select"
    },
    {
        "_id": 208,
        "description": "Maximal accepted parent ion charge",
        "msamanda_style_1": "considered_charges",
        "msfragger_style_1": "precursor_max_charge",
        "msgfplus_style_1": "-maxCharge",
        "myrimatch_style_1": "NumChargeStates",
        "mzml2mgf_style_1": "precursor_max_charge",
        "omssa_style_1": "-zh",
        "pyqms_style_1": "precursor_max_charge",
        "sugarpy_plot_style_1": "max_charge",
        "sugarpy_run_style_1": "max_charge",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 209,
        "description": "Maximal parent ion mass in Da. Adjusted to default used by MSFragger",
        "kojak_style_1": "precursor_max_mass",
        "msfragger_style_1": "precursor_max_mass",
        "myrimatch_style_1": "MaxPeptideMass",
        "pglyco_db_style_1": "max_peptide_weight",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, minimum parent m+h"
    },
    {
        "_id": 210,
        "description": "Minimal accepted parent ion charge",
        "msamanda_style_1": "considered_charges",
        "msfragger_style_1": "precursor_min_charge",
        "msgfplus_style_1": "-minCharge",
        "mzml2mgf_style_1": "precursor_min_charge",
        "omssa_style_1": "-zl",
        "pyqms_style_1": "precursor_min_charge",
        "sugarpy_plot_style_1": "min_charge",
        "sugarpy_run_style_1": "min_charge",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 211,
        "description": "Minimal parent ion mass",
        "kojak_style_1": "precursor_min_mass",
        "msfragger_style_1": "precursor_min_mass",
        "myrimatch_style_1": "MinPeptideMass",
        "pglyco_db_style_1": "min_peptide_weight",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, minimum parent m+h"
    },
    {
        "_id": 212,
        "description": "True precursor mass tolerance (window is +/- this value). Used for tie breaker of results (in spectrally ambiguous cases) and zero bin boosting in open searches (0 disables these features). This option is STRONGLY recommended for open searches.",
        "msfragger_style_1": "precursor_true_tolerance",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 213,
        "description": "Mass tolerance units fo precursor_true_tolerance",
        "msfragger_style_1": "precursor_true_units",
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": {
                "da": 0,
                "ppm": 1
            }
        },
        "value_type": "str"
    },
    {
        "_id": 214,
        "description": "'None' : None",
        "triggers_rerun": true,
        "ucontroller_style_1": "prefix",
        "value_translations": {},
        "value_type": "None"
    },
    {
        "_id": 215,
        "description": "This delimiter seperates protein IDs/names in the unified csv",
        "percolator_style_1": "protein_delimiter",
        "triggers_rerun": true,
        "unify_csv_style_1": "protein_delimiter",
        "upeptide_mapper_style_1": "protein_delimiter",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 216,
        "description": "List of column names that are used to define unique PSMs and to merge multiple lines of the same PSM (if specified). The validation_score_field is automatically added to this list.",
        "triggers_rerun": true,
        "ucontroller_style_1": "psm_defining_colnames",
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 217,
        "description": "Defines the column names which should have their different values merged into a single value when merging rows corresponding the same PSM Formatted as a dictionary with keys as the column names and values as a parameter to specify which one of the different values to take Available values: max_value min_value most_frequent avg_value",
        "triggers_rerun": true,
        "ucontroller_style_1": "colnames_to_merge_multiple_values",
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 218,
        "description": "This delimiter seperates differing values for merged rows in the unified csv",
        "triggers_rerun": true,
        "ucontroller_style_1": "psm_merge_delimiter",
        "unify_csv_style_1": "psm_merge_delimiter",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 219,
        "description": "The relative crossvalidation step size used as treshhold before ending the iterations, qvality determines step size automatically when set to 0",
        "qvality_style_1": "-c",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 220,
        "description": "The relative step size used as treshhold before cross validation error is calculated, qvality determines step size automatically when set to 0",
        "qvality_style_1": "-s",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 221,
        "description": "Number of bins used in qvality",
        "qvality_style_1": "-n",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 222,
        "description": "Verbose qvality output (range from 0 = no processing info to 5 = all)",
        "qvality_style_1": "-v",
        "triggers_rerun": true,
        "value_translations": {
            "qvality_style_1": {
                "1": 1,
                "2": 2,
                "3": 3,
                "4": 4,
                "5": 5
            }
        },
        "value_type": "select"
    },
    {
        "_id": 223,
        "description": "CSV suffix of raw indentification: this is the conversion result after CSV conversion but before adding retention time",
        "triggers_rerun": true,
        "ucontroller_style_1": "raw_ident_csv_suffix",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 224,
        "description": "If True, redundant PSMs (e.g. the same identification reported by multiple engines) for the same spectrum are removed. An identification is defined by the combination of 'Sequence', 'Modifications' and 'Charge'.",
        "sanitize_csv_style_1": "remove_redundant_psms",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 225,
        "description": "Remove temporary files: True or False",
        "triggers_rerun": true,
        "ucontroller_style_1": "remove_temporary_files",
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 226,
        "description": "Masses of modifications are rounded in order to match them to their corresponding unimod name. Use this parameter to set the number of decimal places after rounding.",
        "triggers_rerun": true,
        "unify_csv_style_1": "rounded_mass_decimals",
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 227,
        "description": "name of the pickle that is used to map the retention time",
        "mgf_to_rt_lookup_style_1": "rt_pickle_name",
        "sugarpy_plot_style_1": "scan_rt_lookup",
        "sugarpy_run_style_1": "scan_rt_lookup",
        "triggers_rerun": true,
        "ucontroller_style_1": "rt_pickle_name",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 228,
        "description": "Spectra rejected during mzml2mgf conversion",
        "mzml2mgf_style_1": "scan_exclusion_list",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 229,
        "description": "Exclusively spectra included during mzml2mgf conversion",
        "mzml2mgf_style_1": "scan_inclusion_list",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 230,
        "description": "Include only the n-th spectrum during mzml2mgf conversion 1 : None",
        "mzml2mgf_style_1": "scan_skip_modulo_step",
        "triggers_rerun": true,
        "value_translations": {
            "mzml2mgf_style_1": {}
        },
        "value_type": "int"
    },
    {
        "_id": 231,
        "description": "Use correlation correction to score?",
        "omssa_style_1": "-scorr",
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": {
                "false": 1,
                "true": 0
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 232,
        "description": "Minimum score difference between the best PSM and the first rejected PSM of one spectrum, default: 0.01",
        "sanitize_csv_style_1": "score_diff_threshold",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 233,
        "description": "List of ion types that are taken into account by the respective search engine.Availabel ion types: a, b, c, x, y, z, -h2o, -nh3, b1, c_terminal, imm (immonium), int (internal), z+1, z+2",
        "kojak_style_1": [
            "ion_series_X",
            "ion_series_Y",
            "ion_series_Z",
            "ion_series_A",
            "ion_series_B",
            "ion_series_C"
        ],
        "msamanda_style_1": "series",
        "myrimatch_style_1": "FragmentationRule",
        "omssa_style_1": [
            "-i",
            "-sct",
            "-sb1"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list",
        "xtandem_style_1": [
            "scoring, x ions",
            "scoring, y ions",
            "scoring, z ions",
            "scoring, a ions",
            "scoring, b ions",
            "scoring, c ions"
        ]
    },
    {
        "_id": 234,
        "description": "Search for potential single amino acid polymorphisms. 'True' might cause problems in the downstream processing of th result files (unify_csv, ...)",
        "triggers_rerun": true,
        "value_translations": {
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "protein, saps"
    },
    {
        "_id": 235,
        "description": "Allows semi-enzymatic peptide ends",
        "moda_style_1": "enzyme_constraint_min_number_termini",
        "msamanda_style_1": "enzyme specificity",
        "msfragger_style_1": "num_enzyme_termini",
        "msgfplus_style_1": "-ntt",
        "myrimatch_style_1": "MinTerminiCleavages",
        "omssa_style_1": "semi_enzyme",
        "triggers_rerun": true,
        "unify_csv_style_1": "semi_enzyme",
        "value_translations": {
            "moda_style_1": {
                "false": 2,
                "true": 1
            },
            "msamanda_style_1": {
                "false": "Full",
                "true": "Semi"
            },
            "msfragger_style_1": {
                "false": 2,
                "true": 1
            },
            "msgfplus_style_1": {
                "false": 2,
                "true": 1
            },
            "myrimatch_style_1": {
                "false": 2,
                "true": 1
            },
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "protein, cleavage semi"
    },
    {
        "_id": 236,
        "description": "Show ursgal nodes that are in development: False or True",
        "triggers_rerun": true,
        "ucontroller_style_1": "show_unodes_in_development",
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 237,
        "description": "Internal normalization for MS/MS spectrum: The highest peak (intensity) within a spectrum is set to given value and all other peaks are normalized to this peak. If the normalized value is less than 1 the peak is rejected.",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int",
        "xtandem_style_1": "spectrum, dynamic range"
    },
    {
        "_id": 238,
        "csv2ssl_style_1": "score_column_name",
        "description": "Name of the column that includes the scores that should be used for the .ssl file",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 239,
        "csv2ssl_style_1": "score_type",
        "description": "Type of scores used for the .ssl file",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 240,
        "description": "Penalty parameter C of the error term of the post-processing SVM",
        "svm_style_1": "c",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 241,
        "_test_node_style_1": "test_param1",
        "description": "TEST/DEBUG: Internal Ursgal parameter 1 for debugging and testing.",
        "triggers_rerun": true,
        "value_translations": {
            "_test_node_style_1": {
                "a": "A",
                "b": "B",
                "c": "C",
                "d": "D",
                "e": "E"
            }
        },
        "value_type": "select"
    },
    {
        "_id": 242,
        "_test_node_style_1": "test_param2",
        "description": "TEST/DEBUG: Internal Ursgal parameter 2 for debugging and testing.",
        "triggers_rerun": true,
        "value_translations": {
            "_test_node_style_1": {
                "five": 5,
                "four": 4,
                "one": 1,
                "three": 3,
                "two": 2
            }
        },
        "value_type": "select"
    },
    {
        "_id": 243,
        "description": "True, if log10 scale has been used for score_diff_threshold.",
        "sanitize_csv_style_1": "threshold_is_log10",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 244,
        "description": "unify csv converter version: version name",
        "triggers_rerun": true,
        "ucontroller_style_1": "unify_csv_converter_version",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 245,
        "description": "Use pyQms for accurate calculation of isotopologue m/z. This will affect the accuracy (ppm) calculation as well. If True, unify_csv will be significantly slower. Please note that this does not work for any type of labeling yet.",
        "triggers_rerun": true,
        "unify_csv_style_1": "use_pyqms_for_mz_calculation",
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 246,
        "description": "URL that is used to prepare and install resources via corresponding scripts (prepare_resources.py and install_resources.py)",
        "triggers_rerun": false,
        "ucontroller_style_1": "ursgal_resource_url",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 247,
        "description": "Use filter for low quality spectra.",
        "pepnovo_style_1": "-no_quality_filter",
        "triggers_rerun": true,
        "value_translations": {
            "pepnovo_style_1": {
                "false": true,
                "true": false
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 248,
        "description": "X! TANDEM can use 'refinement' to improve the speed and accuracy of peptide modelling. This is not included in Ursgal, yet. See further: http://www.thegpm.org/TANDEM/api/refine.html",
        "triggers_rerun": true,
        "value_translations": {
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "refine"
    },
    {
        "_id": 249,
        "description": "Does not correct precursor charge.",
        "msfragger_style_1": "override_charge",
        "pepnovo_style_1": "-use_spectrum_charge",
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": {
                "false": 1,
                "true": 0
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 250,
        "description": "Does not correct precusor m/z.",
        "moda_style_1": "AutoPMCorrection",
        "pepnovo_style_1": "-use_spectrum_mz",
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": {
                "false": "1",
                "true": "0"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 251,
        "description": "CSV suffix of validated identification files: string, CSV-file which contains PSMs validated with validation tools",
        "triggers_rerun": true,
        "ucontroller_style_1": "validated_ident_csv_suffix",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 252,
        "description": "Generalized target decoy competition, situations where PSMs known to more frequently be incorrect are mixed in with the correct PSMs",
        "qvality_style_1": "-g",
        "triggers_rerun": true,
        "value_translations": {
            "qvality_style_1": {
                "false": null,
                "true": ""
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 253,
        "description": "Defines the minimum score used for validation. If scores lower than this are produced, they are set to the minimum score. This is used to avoid huge gaps/jumps in the score distribution 'None' : None",
        "qvality_style_1": "validation_minimum_score",
        "triggers_rerun": true,
        "value_translations": {
            "qvality_style_1": {
                "moda_v1_51": 0,
                "moda_v1_61": 0,
                "moda_v1_62": 0,
                "msamanda_1_0_0_5242": 0,
                "msamanda_1_0_0_5243": 0,
                "msamanda_1_0_0_6299": 0,
                "msamanda_1_0_0_6300": 0,
                "msamanda_1_0_0_7503": 0,
                "msamanda_1_0_0_7504": 0,
                "msamanda_2_0_0_10695": 0,
                "msamanda_2_0_0_11219": 0,
                "msamanda_2_0_0_13723": 0,
                "msamanda_2_0_0_9695": 0,
                "msamanda_2_0_0_9706": 0,
                "msfragger_20170103": 0,
                "msfragger_20171106": 0,
                "msfragger_20190222": 0,
                "msgfplus_v2016_09_16": 1e-100,
                "msgfplus_v2017_01_27": 1e-100,
                "msgfplus_v2018_01_30": 1e-100,
                "msgfplus_v2018_06_28": 1e-100,
                "msgfplus_v2018_09_12": 1e-100,
                "msgfplus_v2019_01_22": 1e-100,
                "msgfplus_v2019_04_18": 1e-100,
                "msgfplus_v9979": 1e-100,
                "myrimatch_2_1_138": 0,
                "myrimatch_2_2_140": 0,
                "omssa_2_1_9": 1e-30,
                "pipi_1_4_5": 0,
                "pipi_1_4_6": 0,
                "xtandem_alanine": 0,
                "xtandem_cyclone_2010": 0,
                "xtandem_jackhammer": 0,
                "xtandem_piledriver": 0,
                "xtandem_sledgehammer": 0,
                "xtandem_vengeance": 0
            }
        },
        "value_type": "str"
    },
    {
        "_id": 254,
        "add_estimated_fdr_style_1": "validation_score_field",
        "description": "Name of the column that is used for validation, e.g. by qvality and percolator. If None is defined, default values are used 'None' : None",
        "percolator_style_1": "validation_score_field",
        "qvality_style_1": "validation_score_field",
        "sanitize_csv_style_1": "validation_score_field",
        "svm_style_1": "validation_score_field",
        "triggers_rerun": true,
        "ucontroller_style_1": "validation_score_field",
        "unify_csv_style_1": "validation_score_field",
        "value_translations": {
            "add_estimated_fdr_style_1": {
                "deepnovo_0_0_1": "DeepNovo:score",
                "mascot_x_x_x": "Mascot:Score",
                "moda_v1_51": "ModA:probability",
                "moda_v1_61": "ModA:probability",
                "moda_v1_62": "ModA:probability",
                "msamanda_1_0_0_5242": "Amanda:Score",
                "msamanda_1_0_0_5243": "Amanda:Score",
                "msamanda_1_0_0_6299": "Amanda:Score",
                "msamanda_1_0_0_6300": "Amanda:Score",
                "msamanda_1_0_0_7503": "Amanda:Score",
                "msamanda_1_0_0_7504": "Amanda:Score",
                "msamanda_2_0_0_10695": "Amanda:Score",
                "msamanda_2_0_0_11219": "Amanda:Score",
                "msamanda_2_0_0_13723": "Amanda:Score",
                "msamanda_2_0_0_9695": "Amanda:Score",
                "msamanda_2_0_0_9706": "Amanda:Score",
                "msfragger_20170103": "MSFragger:Hyperscore",
                "msfragger_20171106": "MSFragger:Hyperscore",
                "msfragger_20190222": "MSFragger:Hyperscore",
                "msgfplus_v2016_09_16": "MS-GF:SpecEValue",
                "msgfplus_v2017_01_27": "MS-GF:SpecEValue",
                "msgfplus_v2018_01_30": "MS-GF:SpecEValue",
                "msgfplus_v2018_06_28": "MS-GF:SpecEValue",
                "msgfplus_v2018_09_12": "MS-GF:SpecEValue",
                "msgfplus_v2019_01_22": "MS-GF:SpecEValue",
                "msgfplus_v2019_04_18": "MS-GF:SpecEValue",
                "msgfplus_v9979": "MS-GF:SpecEValue",
                "myrimatch_2_1_138": "MyriMatch:MVH",
                "myrimatch_2_2_140": "MyriMatch:MVH",
                "novor_1_05": "Novor:score",
                "novor_1_1beta": "Novor:score",
                "omssa_2_1_9": "OMSSA:pvalue",
                "pepnovo_3_1": "Pepnovo:PnvScr",
                "pglyco_db_2_2_0": "pGlyco:TotalScore",
                "pipi_1_4_5": "PIPI:score",
                "pipi_1_4_6": "PIPI:score",
                "xtandem_alanine": "X\\!Tandem:hyperscore",
                "xtandem_cyclone_2010": "X\\!Tandem:hyperscore",
                "xtandem_jackhammer": "X\\!Tandem:hyperscore",
                "xtandem_piledriver": "X\\!Tandem:hyperscore",
                "xtandem_sledgehammer": "X\\!Tandem:hyperscore",
                "xtandem_vengeance": "X\\!Tandem:hyperscore"
            },
            "percolator_style_1": {
                "deepnovo_0_0_1": "DeepNovo:score",
                "mascot_x_x_x": "Mascot:Score",
                "moda_v1_51": "ModA:probability",
                "moda_v1_61": "ModA:probability",
                "moda_v1_62": "ModA:probability",
                "msamanda_1_0_0_5242": "Amanda:Score",
                "msamanda_1_0_0_5243": "Amanda:Score",
                "msamanda_1_0_0_6299": "Amanda:Score",
                "msamanda_1_0_0_6300": "Amanda:Score",
                "msamanda_1_0_0_7503": "Amanda:Score",
                "msamanda_1_0_0_7504": "Amanda:Score",
                "msamanda_2_0_0_10695": "Amanda:Score",
                "msamanda_2_0_0_11219": "Amanda:Score",
                "msamanda_2_0_0_13723": "Amanda:Score",
                "msamanda_2_0_0_9695": "Amanda:Score",
                "msamanda_2_0_0_9706": "Amanda:Score",
                "msfragger_20170103": "MSFragger:Hyperscore",
                "msfragger_20171106": "MSFragger:Hyperscore",
                "msfragger_20190222": "MSFragger:Hyperscore",
                "msgfplus_v2016_09_16": "MS-GF:SpecEValue",
                "msgfplus_v2017_01_27": "MS-GF:SpecEValue",
                "msgfplus_v2018_01_30": "MS-GF:SpecEValue",
                "msgfplus_v2018_06_28": "MS-GF:SpecEValue",
                "msgfplus_v2018_09_12": "MS-GF:SpecEValue",
                "msgfplus_v2019_01_22": "MS-GF:SpecEValue",
                "msgfplus_v2019_04_18": "MS-GF:SpecEValue",
                "msgfplus_v9979": "MS-GF:SpecEValue",
                "myrimatch_2_1_138": "MyriMatch:MVH",
                "myrimatch_2_2_140": "MyriMatch:MVH",
                "novor_1_05": "Novor:score",
                "novor_1_1beta": "Novor:score",
                "omssa_2_1_9": "OMSSA:pvalue",
                "pepnovo_3_1": "Pepnovo:PnvScr",
                "pglyco_db_2_2_0": "pGlyco:TotalScore",
                "pipi_1_4_5": "PIPI:score",
                "pipi_1_4_6": "PIPI:score",
                "xtandem_alanine": "X\\!Tandem:hyperscore",
                "xtandem_cyclone_2010": "X\\!Tandem:hyperscore",
                "xtandem_jackhammer": "X\\!Tandem:hyperscore",
                "xtandem_piledriver": "X\\!Tandem:hyperscore",
                "xtandem_sledgehammer": "X\\!Tandem:hyperscore",
                "xtandem_vengeance": "X\\!Tandem:hyperscore"
            },
            "qvality_style_1": {
                "deepnovo_0_0_1": "DeepNovo:score",
                "mascot_x_x_x": "Mascot:Score",
                "moda_v1_51": "ModA:probability",
                "moda_v1_61": "ModA:probability",
                "moda_v1_62": "ModA:probability",
                "msamanda_1_0_0_5242": "Amanda:Score",
                "msamanda_1_0_0_5243": "Amanda:Score",
                "msamanda_1_0_0_6299": "Amanda:Score",
                "msamanda_1_0_0_6300": "Amanda:Score",
                "msamanda_1_0_0_7503": "Amanda:Score",
                "msamanda_1_0_0_7504": "Amanda:Score",
                "msamanda_2_0_0_10695": "Amanda:Score",
                "msamanda_2_0_0_11219": "Amanda:Score",
                "msamanda_2_0_0_13723": "Amanda:Score",
                "msamanda_2_0_0_9695": "Amanda:Score",
                "msamanda_2_0_0_9706": "Amanda:Score",
                "msfragger_20170103": "MSFragger:Hyperscore",
                "msfragger_20171106": "MSFragger:Hyperscore",
                "msfragger_20190222": "MSFragger:Hyperscore",
                "msgfplus_v2016_09_16": "MS-GF:SpecEValue",
                "msgfplus_v2017_01_27": "MS-GF:SpecEValue",
                "msgfplus_v2018_01_30": "MS-GF:SpecEValue",
                "msgfplus_v2018_06_28": "MS-GF:SpecEValue",
                "msgfplus_v2018_09_12": "MS-GF:SpecEValue",
                "msgfplus_v2019_01_22": "MS-GF:SpecEValue",
                "msgfplus_v2019_04_18": "MS-GF:SpecEValue",
                "msgfplus_v9979": "MS-GF:SpecEValue",
                "myrimatch_2_1_138": "MyriMatch:MVH",
                "myrimatch_2_2_140": "MyriMatch:MVH",
                "novor_1_05": "Novor:score",
                "novor_1_1beta": "Novor:score",
                "omssa_2_1_9": "OMSSA:pvalue",
                "pepnovo_3_1": "Pepnovo:PnvScr",
                "pglyco_db_2_2_0": "pGlyco:TotalScore",
                "pipi_1_4_5": "PIPI:score",
                "pipi_1_4_6": "PIPI:score",
                "xtandem_alanine": "X\\!Tandem:hyperscore",
                "xtandem_cyclone_2010": "X\\!Tandem:hyperscore",
                "xtandem_jackhammer": "X\\!Tandem:hyperscore",
                "xtandem_piledriver": "X\\!Tandem:hyperscore",
                "xtandem_sledgehammer": "X\\!Tandem:hyperscore",
                "xtandem_vengeance": "X\\!Tandem:hyperscore"
            },
            "sanitize_csv_style_1": {
                "deepnovo_0_0_1": "DeepNovo:score",
                "mascot_x_x_x": "Mascot:Score",
                "moda_v1_51": "ModA:probability",
                "moda_v1_61": "ModA:probability",
                "moda_v1_62": "ModA:probability",
                "msamanda_1_0_0_5242": "Amanda:Score",
                "msamanda_1_0_0_5243": "Amanda:Score",
                "msamanda_1_0_0_6299": "Amanda:Score",
                "msamanda_1_0_0_6300": "Amanda:Score",
                "msamanda_1_0_0_7503": "Amanda:Score",
                "msamanda_1_0_0_7504": "Amanda:Score",
                "msamanda_2_0_0_10695": "Amanda:Score",
                "msamanda_2_0_0_11219": "Amanda:Score",
                "msamanda_2_0_0_13723": "Amanda:Score",
                "msamanda_2_0_0_9695": "Amanda:Score",
                "msamanda_2_0_0_9706": "Amanda:Score",
                "msfragger_20170103": "MSFragger:Hyperscore",
                "msfragger_20171106": "MSFragger:Hyperscore",
                "msfragger_20190222": "MSFragger:Hyperscore",
                "msgfplus_v2016_09_16": "MS-GF:SpecEValue",
                "msgfplus_v2017_01_27": "MS-GF:SpecEValue",
                "msgfplus_v2018_01_30": "MS-GF:SpecEValue",
                "msgfplus_v2018_06_28": "MS-GF:SpecEValue",
                "msgfplus_v2018_09_12": "MS-GF:SpecEValue",
                "msgfplus_v2019_01_22": "MS-GF:SpecEValue",
                "msgfplus_v2019_04_18": "MS-GF:SpecEValue",
                "msgfplus_v9979": "MS-GF:SpecEValue",
                "myrimatch_2_1_138": "MyriMatch:MVH",
                "myrimatch_2_2_140": "MyriMatch:MVH",
                "novor_1_05": "Novor:score",
                "novor_1_1beta": "Novor:score",
                "omssa_2_1_9": "OMSSA:pvalue",
                "pepnovo_3_1": "Pepnovo:PnvScr",
                "pglyco_db_2_2_0": "pGlyco:TotalScore",
                "pipi_1_4_5": "PIPI:score",
                "pipi_1_4_6": "PIPI:score",
                "xtandem_alanine": "X\\!Tandem:hyperscore",
                "xtandem_cyclone_2010": "X\\!Tandem:hyperscore",
                "xtandem_jackhammer": "X\\!Tandem:hyperscore",
                "xtandem_piledriver": "X\\!Tandem:hyperscore",
                "xtandem_sledgehammer": "X\\!Tandem:hyperscore",
                "xtandem_vengeance": "X\\!Tandem:hyperscore"
            },
            "svm_style_1": {
                "deepnovo_0_0_1": "DeepNovo:score",
                "mascot_x_x_x": "Mascot:Score",
                "moda_v1_51": "ModA:probability",
                "moda_v1_61": "ModA:probability",
                "moda_v1_62": "ModA:probability",
                "msamanda_1_0_0_5242": "Amanda:Score",
                "msamanda_1_0_0_5243": "Amanda:Score",
                "msamanda_1_0_0_6299": "Amanda:Score",
                "msamanda_1_0_0_6300": "Amanda:Score",
                "msamanda_1_0_0_7503": "Amanda:Score",
                "msamanda_1_0_0_7504": "Amanda:Score",
                "msamanda_2_0_0_10695": "Amanda:Score",
                "msamanda_2_0_0_11219": "Amanda:Score",
                "msamanda_2_0_0_13723": "Amanda:Score",
                "msamanda_2_0_0_9695": "Amanda:Score",
                "msamanda_2_0_0_9706": "Amanda:Score",
                "msfragger_20170103": "MSFragger:Hyperscore",
                "msfragger_20171106": "MSFragger:Hyperscore",
                "msfragger_20190222": "MSFragger:Hyperscore",
                "msgfplus_v2016_09_16": "MS-GF:SpecEValue",
                "msgfplus_v2017_01_27": "MS-GF:SpecEValue",
                "msgfplus_v2018_01_30": "MS-GF:SpecEValue",
                "msgfplus_v2018_06_28": "MS-GF:SpecEValue",
                "msgfplus_v2018_09_12": "MS-GF:SpecEValue",
                "msgfplus_v2019_01_22": "MS-GF:SpecEValue",
                "msgfplus_v2019_04_18": "MS-GF:SpecEValue",
                "msgfplus_v9979": "MS-GF:SpecEValue",
                "myrimatch_2_1_138": "MyriMatch:MVH",
                "myrimatch_2_2_140": "MyriMatch:MVH",
                "novor_1_05": "Novor:score",
                "novor_1_1beta": "Novor:score",
                "omssa_2_1_9": "OMSSA:pvalue",
                "pepnovo_3_1": "Pepnovo:PnvScr",
                "pglyco_db_2_2_0": "pGlyco:TotalScore",
                "pipi_1_4_5": "PIPI:score",
                "pipi_1_4_6": "PIPI:score",
                "xtandem_alanine": "X\\!Tandem:hyperscore",
                "xtandem_cyclone_2010": "X\\!Tandem:hyperscore",
                "xtandem_jackhammer": "X\\!Tandem:hyperscore",
                "xtandem_piledriver": "X\\!Tandem:hyperscore",
                "xtandem_sledgehammer": "X\\!Tandem:hyperscore",
                "xtandem_vengeance": "X\\!Tandem:hyperscore"
            },
            "ucontroller_style_1": {
                "deepnovo_0_0_1": "DeepNovo:score",
                "mascot_x_x_x": "Mascot:Score",
                "moda_v1_51": "ModA:probability",
                "moda_v1_61": "ModA:probability",
                "moda_v1_62": "ModA:probability",
                "msamanda_1_0_0_5242": "Amanda:Score",
                "msamanda_1_0_0_5243": "Amanda:Score",
                "msamanda_1_0_0_6299": "Amanda:Score",
                "msamanda_1_0_0_6300": "Amanda:Score",
                "msamanda_1_0_0_7503": "Amanda:Score",
                "msamanda_1_0_0_7504": "Amanda:Score",
                "msamanda_2_0_0_10695": "Amanda:Score",
                "msamanda_2_0_0_11219": "Amanda:Score",
                "msamanda_2_0_0_13723": "Amanda:Score",
                "msamanda_2_0_0_9695": "Amanda:Score",
                "msamanda_2_0_0_9706": "Amanda:Score",
                "msfragger_20170103": "MSFragger:Hyperscore",
                "msfragger_20171106": "MSFragger:Hyperscore",
                "msfragger_20190222": "MSFragger:Hyperscore",
                "msgfplus_v2016_09_16": "MS-GF:SpecEValue",
                "msgfplus_v2017_01_27": "MS-GF:SpecEValue",
                "msgfplus_v2018_01_30": "MS-GF:SpecEValue",
                "msgfplus_v2018_06_28": "MS-GF:SpecEValue",
                "msgfplus_v2018_09_12": "MS-GF:SpecEValue",
                "msgfplus_v2019_01_22": "MS-GF:SpecEValue",
                "msgfplus_v2019_04_18": "MS-GF:SpecEValue",
                "msgfplus_v9979": "MS-GF:SpecEValue",
                "myrimatch_2_1_138": "MyriMatch:MVH",
                "myrimatch_2_2_140": "MyriMatch:MVH",
                "novor_1_05": "Novor:score",
                "novor_1_1beta": "Novor:score",
                "omssa_2_1_9": "OMSSA:pvalue",
                "pepnovo_3_1": "Pepnovo:PnvScr",
                "pglyco_db_2_2_0": "pGlyco:TotalScore",
                "pipi_1_4_5": "PIPI:score",
                "pipi_1_4_6": "PIPI:score",
                "xtandem_alanine": "X\\!Tandem:hyperscore",
                "xtandem_cyclone_2010": "X\\!Tandem:hyperscore",
                "xtandem_jackhammer": "X\\!Tandem:hyperscore",
                "xtandem_piledriver": "X\\!Tandem:hyperscore",
                "xtandem_sledgehammer": "X\\!Tandem:hyperscore",
                "xtandem_vengeance": "X\\!Tandem:hyperscore"
            },
            "unify_csv_style_1": {
                "deepnovo_0_0_1": "DeepNovo:score",
                "mascot_x_x_x": "Mascot:Score",
                "moda_v1_51": "ModA:probability",
                "moda_v1_61": "ModA:probability",
                "moda_v1_62": "ModA:probability",
                "msamanda_1_0_0_5242": "Amanda:Score",
                "msamanda_1_0_0_5243": "Amanda:Score",
                "msamanda_1_0_0_6299": "Amanda:Score",
                "msamanda_1_0_0_6300": "Amanda:Score",
                "msamanda_1_0_0_7503": "Amanda:Score",
                "msamanda_1_0_0_7504": "Amanda:Score",
                "msamanda_2_0_0_10695": "Amanda:Score",
                "msamanda_2_0_0_11219": "Amanda:Score",
                "msamanda_2_0_0_13723": "Amanda:Score",
                "msamanda_2_0_0_9695": "Amanda:Score",
                "msamanda_2_0_0_9706": "Amanda:Score",
                "msfragger_20170103": "MSFragger:Hyperscore",
                "msfragger_20171106": "MSFragger:Hyperscore",
                "msfragger_20190222": "MSFragger:Hyperscore",
                "msgfplus_v2016_09_16": "MS-GF:SpecEValue",
                "msgfplus_v2017_01_27": "MS-GF:SpecEValue",
                "msgfplus_v2018_01_30": "MS-GF:SpecEValue",
                "msgfplus_v2018_06_28": "MS-GF:SpecEValue",
                "msgfplus_v2018_09_12": "MS-GF:SpecEValue",
                "msgfplus_v2019_01_22": "MS-GF:SpecEValue",
                "msgfplus_v2019_04_18": "MS-GF:SpecEValue",
                "msgfplus_v9979": "MS-GF:SpecEValue",
                "myrimatch_2_1_138": "MyriMatch:MVH",
                "myrimatch_2_2_140": "MyriMatch:MVH",
                "novor_1_05": "Novor:score",
                "novor_1_1beta": "Novor:score",
                "omssa_2_1_9": "OMSSA:pvalue",
                "pepnovo_3_1": "Pepnovo:PnvScr",
                "pglyco_db_2_2_0": "pGlyco:TotalScore",
                "pipi_1_4_5": "PIPI:score",
                "pipi_1_4_6": "PIPI:score",
                "xtandem_alanine": "X\\!Tandem:hyperscore",
                "xtandem_cyclone_2010": "X\\!Tandem:hyperscore",
                "xtandem_jackhammer": "X\\!Tandem:hyperscore",
                "xtandem_piledriver": "X\\!Tandem:hyperscore",
                "xtandem_sledgehammer": "X\\!Tandem:hyperscore",
                "xtandem_vengeance": "X\\!Tandem:hyperscore"
            }
        },
        "value_type": "str"
    },
    {
        "_id": 255,
        "description": "The specified csv column names are used for the visualization. E.g. for a Venn diagram the entries of these columns are used (merged) to determine overlapping results.",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list",
        "venndiagram_style_1": "visualization_column_names"
    },
    {
        "_id": 256,
        "description": "Font used for visualization plots (e.g. Venn diagram), given as dict with keys: font_type, font_size_header, font_size_major, font_size_minor, font_size_venn",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict",
        "venndiagram_style_1": "visualization_font"
    },
    {
        "_id": 257,
        "description": "Header of visualization output (e.g. Venn diagram)",
        "sugarpy_plot_style_1": "title",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str",
        "venndiagram_style_1": "header"
    },
    {
        "_id": 258,
        "description": "Specifies colors for the datasets that should be visualized. Given as a dict in which the key represents the position of the corresponding dataset in the list, e.g.: {\"0\" : \"#e41a1c\", \"1\" : \"#377eb8\"}",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict",
        "venndiagram_style_1": "visualization_color_position"
    },
    {
        "_id": 259,
        "description": "Specifies labels for the datasets that should be visualized. Given as a dict in which the key represents the position of the corresponding dataset in the list, e.g.: {\"0\" : \"LabelA\", \"1\" : \"LabelB\"}",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict",
        "venndiagram_style_1": "visualization_label_position"
    },
    {
        "_id": 260,
        "description": "Opacity used in visualization plots (e.g. Venn diagram)",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float",
        "venndiagram_style_1": "opacity"
    },
    {
        "_id": 261,
        "description": "Scaling factor for visualization plots (e.g. Venn diagram), given as dict with keys: x_axis, y_axis",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict",
        "venndiagram_style_1": "visualization_scaling_factors"
    },
    {
        "_id": 262,
        "description": "Size of visualization plots (e.g. Venn diagram), given as dict with keys: width, height",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict",
        "venndiagram_style_1": "visualization_size"
    },
    {
        "_id": 263,
        "description": "Stroke width used in visualization plots (e.g. Venn diagram)",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float",
        "venndiagram_style_1": "stroke-width"
    },
    {
        "_id": 264,
        "combine_pep_style_1": "window_size",
        "description": "Combined PEPs are computed by iterating a sliding window over the sorted PSMs. Each PSM receives a PEP based on the target/decoy ratio of the surrounding PEPs. This parameter defines the window size.",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 265,
        "description": "word length used to index peptide mapper, smaller word len requires more memory",
        "triggers_rerun": false,
        "unify_csv_style_1": "word_len",
        "upeptide_mapper_style_1": "word_len",
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 266,
        "description": "Writes rejected results if True",
        "filter_csv_style_1": "write_unfiltered_results",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 267,
        "description": "Determines which X!tandem conversion node should be used e.g. \"xtandem2csv_1_0_0\"",
        "triggers_rerun": true,
        "ucontroller_style_1": "xtandem_converter_version",
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 268,
        "description": "Interpretation of peptide phosphorylation models.",
        "triggers_rerun": true,
        "value_translations": {
            "xtandem_style_1": {
                "false": "no",
                "true": "yes"
            }
        },
        "value_type": "bool",
        "xtandem_style_1": "protein, stP bias"
    },
    {
        "_id": 269,
        "description": "List of Unimod PSI-MS names corresponding to glycans that were included in the database search as modification (will be removed from the peptidoform by SugarPy).",
        "sugarpy_plot_style_1": "unimod_glycans_incl_in_search",
        "sugarpy_run_style_1": "unimod_glycans_incl_in_search",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 270,
        "description": "Accuracy of identifications (ident_file) are used to calculate the machine_offset_in_ppm. If \"all\" is selected, the median of all identifications will be used, for \"peptide\" the median of each peptide will be used.",
        "sugarpy_run_style_1": "use_median_accuracy",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 271,
        "description": "Minimum number of monosaccharides per glycan",
        "sugarpy_run_style_1": "min_tree_length",
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 272,
        "description": "Maximum number of monosaccharides per glycan",
        "sugarpy_plot_style_1": "max_tree_length",
        "sugarpy_run_style_1": "max_tree_length",
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 273,
        "description": "Dictionary defining the chemical formula (hill notation) for each monosaccharide that is used.",
        "sugarpy_plot_style_1": "monosaccharides",
        "sugarpy_run_style_1": "monosaccharides",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 274,
        "description": "Path to the mzML input file",
        "sugarpy_plot_style_1": "mzml_file",
        "sugarpy_run_style_1": "mzml_file",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 275,
        "description": "Path to the SugarPy results .pkl",
        "sugarpy_plot_style_1": "validated_results_pkl",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 276,
        "description": "Path to the SugarPy results .csv",
        "sugarpy_plot_style_1": "result_file",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 277,
        "description": "Min number of spectra in which a molecule needs to be matched in order to consider it for further processing",
        "sugarpy_plot_style_1": "min_spec_number",
        "sugarpy_run_style_1": "min_spec_number",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 278,
        "description": "Max number of glycoforms reported per spectrum for each peptide",
        "sugarpy_plot_style_1": "max_trees_per_spec",
        "sugarpy_run_style_1": "max_trees_per_spec",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 279,
        "description": "Min SugarPy score to be considered for output",
        "sugarpy_plot_style_1": "min_sugarpy_score",
        "sugarpy_run_style_1": "min_sugarpy_score",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 280,
        "description": "Min subtree coverage to be considered for output",
        "sugarpy_plot_style_1": "min_sub_cov",
        "sugarpy_run_style_1": "min_sub_cov",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "_id": 281,
        "description": "List of plot types that should be created by the SugarPy plotting function. Available are: \"plot_molecule_elution_profile\", \"plot_glycan_elution_profile\", \"plot_annotated_spectra\", \"check_peak_presence\", \"check_frag_specs\"",
        "sugarpy_plot_style_1": "plot_types",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 282,
        "description": "List of peak types that should be plotted by the SugarPy plot spectrum function. Available are: \"matched\" (peaks matched by pyQms), \"unmatched\" (unmatched peaks from matched formulas), \"labels@ (for monoisotopic peaks)",
        "sugarpy_plot_style_1": "plot_peak_types",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 283,
        "description": "List of subtree formulas (hill notation) that should not be plotted. Formulas include the complete molecule, i.e. peptide and glycan",
        "sugarpy_plot_style_1": "remove_subtrees",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "_id": 284,
        "description": "Defines if/how subtrees should be taken into account for plotting molecule elution profiles in SugarPy. Available are: \"no_subtrees\", \"sum_subtrees\", \"individual_subtrees\"",
        "sugarpy_plot_style_1": "include_subtrees",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 285,
        "description": "The dict contains all peptidoforms (Peptide#Unimod:Pos) as keys and a dict with the glycans (keys) and {'charges':set(), 'file_names':set()} (value) as values. It can be auto generated from a SugarPy results .csv (use uparam sugarpy_results_file to specify). Don't use sugarpy_results_file and sugarpy_plot_molecule_dict at the same time!",
        "sugarpy_plot_style_1": "plot_molecule_dict",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 286,
        "description": "The dict defines the colors of \"matched\", \"unmatched\", \"raw\" peaks and \"labels\"",
        "sugarpy_plot_style_1": "peak_colors",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 287,
        "description": "Defines the values used for the x-axis. Available are: \"retention_time\", \"spectrum_id\"",
        "sugarpy_plot_style_1": "x_axis_type",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 288,
        "description": "Defines the score type used for the y-axis. Available are: \"top_scores\", \"sum_scores\"",
        "sugarpy_plot_style_1": "score_type",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 289,
        "description": "The dict defines plotly layout options. Checkout https://plot.ly/python/reference/#layout for all available options",
        "sugarpy_plot_style_1": "plotly_layout",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 290,
        "description": "Glycan (given in the SugarPy Hill noation format) that will be used for matching glycopeptide fragment ions in MS2 spectra from non-glycosylated peptides",
        "sugarpy_plot_style_1": "decoy_glycan",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 291,
        "description": "Min number of oxonium ions that need to be matched in an MS/MS spectrum, to be accepted as containing oxonium ions (i.e. considered as glycopeptide)",
        "sugarpy_plot_style_1": "min_oxonium_ions",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 292,
        "description": "Min number of Y-ions that need to be matched in an MS/MS spectrum, to be accepted as containing Y-ions (i.e. considered as glycopeptide)",
        "sugarpy_plot_style_1": "min_Y_ions",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 293,
        "description": "Path to the Ursgal results .csv containing all PSMs in the unified format",
        "sugarpy_plot_style_1": "ursgal_ident_file",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 294,
        "description": "Contaminants are added automatically to the database by the search engine. PIPI uses the same contaminants database as MaxQuant",
        "pipi_style_1": "add_contaminant",
        "triggers_rerun": true,
        "value_translations": {
            "pipi_style_1": {
                "false": "0",
                "true": "1"
            }
        },
        "value_type": "bool"
    },
    {
        "_id": 295,
        "description": "The user can retrieve a csv file containing results from the venn diagram",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool",
        "venndiagram_style_1": "extract_venndiagram_file"
    },
    {
        "_id": 296,
        "description": "Specify the spectrum ID attribute to be used to access the spectrum ID (ID, id_dict or index). Given as a dict (key = attribute, value = key in id_dict). For .wiff files, during conversion to mzML, spectrum IDs are formatted differently; pymzml can deal with this by returning an id_dict or accessing the index.",
        "mzml2mgf_style_1": "spec_id_attribute",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 297,
        "description": "Convert a single aminoacid in a sequence motif into another characeter using a string \"new_aa,motif,position_to_be_replaced\" where new_aa is the new character, motif is the regular expression that identifies the sequenc motif and position_to_be_replaced is the position in the motif that should be replaced (e.g. use \"J,N[^P][ST],0\" to convert N-X-S/T into J-X-S/T",
        "generate_target_decoy_style_1": "convert_aa_in_motif",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "_id": 298,
        "description": "Dictionary to specify options and their value for pParse. For available options see http://pfind.ict.ac.cn/software/pParse/#",
        "pparse_style_1": "pparse_options",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 299,
        "description": "Dictionary to specify options and their value for ThermoRawFileParser. If options are given as a flag only, specify 'None' as their value. For available options see https://github.com/compomics/ThermoRawFileParser",
        "thermo_raw_file_parser_style_1": [
            "-h",
            "-m",
            "-g",
            "-u",
            "-k",
            "-t",
            "-n",
            "-v",
            "-e"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "_id": 300,
        "deepnovo_style_1": "direction",
        "description": "Defines the direction for DeepNovo",
        "triggers_rerun": true,
        "value_translations": {
            "deepnovo_style_1": {
                "bi_directional": 2,
                "forward": 0,
                "reverse": 1
            }
        },
        "value_type": "select"
    },
    {
        "_id": 301,
        "deepnovo_style_1": "use_intensity",
        "description": "DeepNovo uses intensity",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 302,
        "deepnovo_style_1": "shared",
        "description": "DeepNovo uses shared weights",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 303,
        "deepnovo_style_1": "use_lstm",
        "description": "DeepNovo uses lstm",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 304,
        "deepnovo_style_1": "knapsack_build",
        "description": "DeepNovo builds the knapsack matrix",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 305,
        "deepnovo_style_1": "beam_search",
        "description": "DeepNovo builds beam search",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "_id": 306,
        "deepnovo_style_1": "beam_size",
        "description": "Number of optimal paths to search during decoding",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "_id": 307,
        "deepnovo_style_1": [
            "search_denovo",
            "search_hybrid",
            "search_db",
            "decode"
        ],
        "description": "Defines the search mode for DeepNovo",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "_id": 308,
        "deepnovo_style_1": "knapsack_file",
        "description": "Path to the knapsack matrix for DeepNovo. Use \"default\" for the default file location in the resources",
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    }
]
